From t-stant at microsoft.com  Wed Sep  1 13:09:08 2004
From: t-stant at microsoft.com (Stanley Tan)
Date: Wed Sep  1 13:10:42 2004
Subject: [OAI-implementers] Creating a Data Provider
Message-ID: <61D43634C510A94C93403A756E8468F001CB74A6@APS-MSG-01.southpacific.corp.microsoft.com>

Skipped content of type multipart/alternative
From simeon at cs.cornell.edu  Thu Sep  2 09:14:06 2004
From: simeon at cs.cornell.edu (Simeon Warner)
Date: Thu Sep  2 09:14:38 2004
Subject: [OAI-implementers] Creating a Data Provider
In-Reply-To: <61D43634C510A94C93403A756E8468F001CB74A6@APS-MSG-01.southpacific.corp.microsoft.com>
References: <61D43634C510A94C93403A756E8468F001CB74A6@APS-MSG-01.southpacific.corp.microsoft.com>
Message-ID: <Pine.LNX.4.58.0409020908240.24805@dhcp103-124.cs.cornell.edu>



On Thu, 2 Sep 2004, Stanley Tan wrote:
> Hi,
>
> What are the steps involved in making a data provider?  I already have a
> database with objects in it.  Is it necessary to modify the existing
> table structure?

You have to support the OAI-PMH protocol and perhaps cross-walk the
metadata in you database into a standard format or formats. It is unlikely
that you'll want to modify your existing database structure.

protocol: http://www.openarchives.org/OAI/2.0/openarchivesprotocol.htm
guidelines for d/p: http://www.openarchives.org/OAI/2.0/guidelines-repository.htm

With luck you'll be able to find existing packages or libraries that you
can use to avoid re-implementing the protocol, see:
http://www.openarchives.org/tools/tools.html

Cheers,
Simeon

>
>
> TIA,
>
>
>
> Stanley
>
>

From jyoung at oclc.org  Thu Sep  2 09:22:21 2004
From: jyoung at oclc.org (Young,Jeff)
Date: Thu Sep  2 09:23:13 2004
Subject: [OAI-implementers] Creating a Data Provider
Message-ID: <E5431CF93E29F9478878F623E5B9CE9809DF769F@oa3-server.oa.oclc.org>

OAICat (http://www.oclc.org/research/software/oai/cat.htm) has a JDBC
implementation, if that's the approach you're looking for. There may be
other implementations in the list that Simeon mentioned, too.

If you try the OAICat implementation and have questions, let me know.

Jeff

> -----Original Message-----
> From: Simeon Warner [mailto:simeon@cs.cornell.edu]
> Sent: Thursday, September 02, 2004 9:14 AM
> To: Stanley Tan
> Cc: oai-implementers@openarchives.org
> Subject: Re: [OAI-implementers] Creating a Data Provider
> 
> 
> 
> On Thu, 2 Sep 2004, Stanley Tan wrote:
> > Hi,
> >
> > What are the steps involved in making a data provider?  I already have a
> > database with objects in it.  Is it necessary to modify the existing
> > table structure?
> 
> You have to support the OAI-PMH protocol and perhaps cross-walk the
> metadata in you database into a standard format or formats. It is unlikely
> that you'll want to modify your existing database structure.
> 
> protocol: http://www.openarchives.org/OAI/2.0/openarchivesprotocol.htm
> guidelines for d/p: http://www.openarchives.org/OAI/2.0/guidelines-
> repository.htm
> 
> With luck you'll be able to find existing packages or libraries that you
> can use to avoid re-implementing the protocol, see:
> http://www.openarchives.org/tools/tools.html
> 
> Cheers,
> Simeon
> 
> >
> >
> > TIA,
> >
> >
> >
> > Stanley
> >
> >
> 
> _______________________________________________
> OAI-implementers mailing list
> List information, archives, preferences and to unsubscribe:
> http://openarchives.org/mailman/listinfo/oai-implementers

From simeon at cs.cornell.edu  Wed Sep 15 16:58:16 2004
From: simeon at cs.cornell.edu (Simeon Warner)
Date: Wed Sep 15 16:58:47 2004
Subject: [OAI-implementers] Re: Proposed corrections/fixes to OAI-PMH
 protocol document and schema
In-Reply-To: <Pine.LNX.4.58.0406151507160.30168@dhcp103-124.cs.cornell.edu>
References: <Pine.LNX.4.58.0406151507160.30168@dhcp103-124.cs.cornell.edu>
Message-ID: <Pine.LNX.4.58.0409151651190.23073@dhcp103-124.cs.cornell.edu>


Back in June I detailed several proposed corrections and fixes to the
OAI-PMH protocol document and schema (copied below, alternatively see:
http://openarchives.org/pipermail/oai-implementers/2004-June/001216.html).
Hussein Suleman sent comments about issues 1 and 2 which I'll reply to in
a separate email. I have implemented the other changes:

3) Added bullet to protocol document, sec2.6, saying sets may be empty.

4) Corrected typo in protocol document sec2.6 to say ListIdentifiers,
   ListRecords and GetRecord instead of just GetRecord.

5) Corrected typo the second example in protocol document sec5.

6) Changed schema to tighten checks on dateTime values so that they
   must use Z notation (in addition to be a valid XML Schema dataTime).

7) Added section "2.5.1 Deleted records", folded in some text from 2.7.1
   following Hussein's suggestion.

8) Already implemented for static repository (2004-03-29)

For reference, the old version of the protocol document is at:
http://www.openarchives.org/OAI/2.0/openarchivesprotocol.2004-06-10.htm
(also includes lots of HTML fixes), and the old version of schema is at:
http://www.openarchives.org/OAI/2.0/OAI-PMH.2004-03-29.xsd

None of these changes should affect conforming implementations.

Cheers,
Simeon


On Tue, 15 Jun 2004, Simeon Warner wrote:
> I've been collecting problems/corrections to the OAI-PMH protocol document
> and schema for some time. I detail proposed corrections and fixes below.
> Please reply either directly to me or to the list with comments or
> additional issues/corrections/errors.
>
> Cheers,
> Simeon
>
>
>
> PROPOSED FIXES TO OAI PROTOCOL DOCUMENT AND SCHEMA
> --------------------------------------------------
>
> 1) Correct protocol document and schema definition of setSpec to be
> consistent, and also to permit the use of URL encoding.
>
> 1.1) Motivation
>
> First, the protocol document and the schema simply do not agree. The use
> of the wording "any characters that are safe in a query component of a
> URI" is unclear and cannot be construed to agree with the schema. Second,
> many repositories are using URL-like encoding to create setSpecs so it
> seems better to permit the recognized URL encoding. The practical change
> to meet both of these criteria is very small: the schema regular
> expression should be changed to remove $ and +, and to add ~ and %xx (URL
> encoding). This will bring the protocol document in line with the terms
> "escaped" and "unreserved" as used in the URI RFC.
>
> 1.2) Impact
>
> The only conforming repository that we know of using setSpecs affected by
> this change is Jeff Young's OpenURL repository
> (http://alcme.oclc.org/openurl/servlet/OAIHandler) where he uses '+' as
> an encoding for space. Jeff agrees that a change would be sensible and
> that he could be replace '+' with '%20'. Repositories using URL-like
> encodings will not be affected although they may choose to change to use
> real URL encoding. All OAI software maintainers should, however, review
> the change and update their parsing code accordingly.
>
> 1.3) Changes
>
> 1.3.1) Change wording in protocol document
> http://www.openarchives.org/OAI/2.0/openarchivesprotocol.htm#Set
> from:
>
> a setSpec -- a colon [:] separated list indicating the path from the root
> of the set hierarchy to the respective node.  Each element in the list is
> a string consisting of any characters that are safe in a query component
> of a URI , which must not contain any colons [ :].  Since a setSpec forms
> a unique identifier for the set within the repository, it must be unique
> for each set.  Flat set organizations have only sets with setSpec that do
> not contain any colons [ :].
>
> to:
>
> a setSpec -- a colon [:] separated list indicating the path from the root
> of the set hierarchy to the respective node. Each element in the list is a
> string consisting of any valid URI "unreserved" and "escaped" characters.
> A setTag must not contain URI "reserved" characters, for example the colon
> [:] which is used to delimit setTags. Since a setSpec forms a unique
> identifier for the set within the repository, it must be unique for each
> set. Flat set organizations have only sets with setSpec that do not
> contain any colons [:].
>
> The corresponding parts of the specification of allowed characters in URIs
> are:
>
> unreserved    = alphanum | mark
> mark          = "-" | "_" | "." | "!" | "~" | "*" | "'" |
>                 "(" | ")"
> escaped       = "%" hex hex
> hex           = digit | "A" | "B" | "C" | "D" | "E" | "F" |
>                 "a" | "b" | "c" | "d" | "e" | "f"
>
>
> 1.3.2) Change definition of setSpecType in the schema to match the definition
> from:
>
>  <simpleType name="setSpecType">
>     <restriction base="string">
>       <pattern value=
>        "([A-Za-z0-9_!'$\(\)\+\-\.\*])+(:[A-Za-z0-9_!'$\(\)\+\-\.\*]+)*"/>
>     </restriction>
>   </simpleType>
>
> to:
>
>   <simpleType name="setSpecType">
>     <restriction base="string">
>       <pattern value="([A-Za-z0-9\-_\.!~\*'\(\)]|(%[A-Fa-f0-9]{2}))+(:([A-Za-z0-9\-_\.!~\*'\(\)]|(%[A-Fa-f0-9]{2}))+)*"/>
>     </restriction>
>   </simpleType>
>
>
> 2) Correct protocol document and schema definition for metadataPrefix to
> be consistent, and also to match the revised setSpec definition.
>
> 2.1) Motivation
>
> The protocol document uses the same imprecise wording for metadataPrefix
> as it does for setSpec ("any characters that are safe in a query
> component of a URI") and the schema does not even follow a reasonable
> interpretation of this wording. It seems sensible to use the same
> character restrictions in a consistent fashion. This will bring the
> protocol document in line with the terms "escaped" and "unreserved" as
> used in the URI RFC.
>
> 2.2) Impact
>
> This change is not expected to impact any known repository.  All OAI
> software maintainers should, however, review the change and update their
> parsing code accordingly.
>
> 2.3) Changes
>
> 2.2.1) Change wording in protocol document
> http://www.openarchives.org/OAI/2.0/openarchivesprotocol.htm#metadataPrefix
> from:
>
> The metadataPrefix - a string to specify the metadata format in OAI-PMH
> requests issued to the repository. metadataPrefix consists of any
> characters that are safe in a query component of a URI. metadataPrefix
> arguments are used in ListRecords, ListIdentifiers, and GetRecord
> requests to retrieve records, or the headers of records that include
> metadata in the format specified by the metadataPrefix;
>
> to:
>
> The metadataPrefix - a string to specify the metadata format in OAI-PMH
> requests issued to the repository. metadataPrefix consists of any valid
> URI "unreserved" and "escaped"  characters. A metadataPrefix must not
> contain URI "reserved" characters. metadataPrefix arguments are used in
> ListRecords, ListIdentifiers, and GetRecord requests to retrieve records,
> or the headers of records that include metadata in the format specified
> by the metadataPrefix;
>
> 2.3.2) Change definition of metadataPrefixType in schema to match the
> definition from:
>
>   <simpleType name="metadataPrefixType">
>     <restriction base="string">
>       <pattern value="[A-Za-z0-9_!'$\(\)\+\-\.\*]+"/>
>     </restriction>
>   </simpleType>
>
> to:
>
>   <simpleType name="metadataPrefixType">
>     <restriction base="string">
>       <pattern value="([A-Za-z0-9\-_\.!~\*'\(\)]|(%[A-Fa-f0-9]{2}))+"/>
>     </restriction>
>   </simpleType>
>
>
> 3) Change protocol document to explicitly state the sets may be empty
>
> 3.1) Motivation
>
> This issue has been raised a number of times in discussion and is not
> made explicit in the protocol document.
>
> 3.2) Impact
>
> None (except clarity)
>
> 3.3) Change: add additional bullet to the final set of bullets in protocol
> document sec2.6
> http://www.openarchives.org/OAI/2.0/openarchivesprotocol.htm#Set
>
> Introduction of bullets should say "Five issues should be noted here"
> instead of "Four issues should be noted here".
>
> Additional bullet: The set hierarchy of a repository may include sets
> that are empty.
>
>
> 4) Correct typo on sec2.6
> (http://www.openarchives.org/OAI/2.0/openarchivesprotocol.htm#Set)
>
> Section 2.6 says:
>
> If a repository supports sets then it must include set membership
> information in the GetRecord request. The list of setSpec should include
> only the minimum number of setSpec required to specify the set
> membership. Using the previous example of a set hierarchy, the header for
> an item organized in set institution:florida should not include setSpec
> institution since that is implied by the setSpec institution:florida .
>
> when it should say 'in response to ListIdentifiers, ListRecords and
> GetRecord requests' instead of 'in the GetRecord request'. The corrected
> paragraph reads:
>
> If a repository supports sets then it must include set membership
> information in the headers returned in response to ListIdentifiers,
> ListRecords and GetRecord requests. The list of setSpec elements should
> include only the minimum number of setSpec elements required to specify
> the set membership. Using the previous example of a set hierarchy, the
> header for an item organized in set institution:florida should not
> include setSpec institution since that is implied by the setSpec
> institution:florida.
>
> [problem pointed out by Mike Taylor <mike@indexdata.com>]
>
>
> 5) Correct typo the second example in protocol document sec5
> http://www.openarchives.org/OAI/2.0/openarchivesprotocol.htm#dublincore
>
> The namespace is incorrectly given in the declaration. It is 'oai' and
> not 'oai_dc' and the example is not schema valid. The following
> correction is required:
>
> 3c3
> <     xmlns:oai="http://www.openarchives.org/OAI/2.0/oai_dc/"
> ---
> >     xmlns:oai_dc="http://www.openarchives.org/OAI/2.0/oai_dc/"
>
> [problem pointed out by Terry Harrison <1maniac@cox.net>]
>
>
> 6) Schema should more tightly validate UTCdatetime
>
> 6.1) Motivation
>
> While the specification is quite clear about what datetime formats must
> be used, the fact that the schema does not enforce the restriction to Z
> notation means that there are errors not found during schema validation.
> The additional check is easy to add to the schema and would likely
> improve interoperability.
>
> 6.2) Impact
>
> No conforming repository should be affected. The responses from some
> non-conforming implementations will no longer schema validate. It is
> hoped that this will encourage maintainers to correct them.
>
> 6.3) Change schema definition from:
>
>   <simpleType name="UTCdatetimeType">
>     <union memberTypes="date dateTime"/>
>   </simpleType>
>
> to:
>
>   <simpleType name="UTCdatetimeType">
>     <union memberTypes="date oai:UTCdateTimeZType"/>
>   </simpleType>
>
>   <simpleType name="UTCdateTimeZType">
>     <restriction base="dateTime">
>       <pattern value=".*Z"/>
>     </restriction>
>   </simpleType>
>
>
> 7) Add section on deleted records to the protocol document
>
> 7.1) Motivation
>
> Deleted records are an issue that causes confusion. This is not helped by
> information about them being distributed over the protocol document.
>
> 7.2) Impact
>
> none (except greater comprehension!)
>
> 7.3) Change protocol document to include:
>
> 2.5.1 Deleted records
>
> If a record is no longer available then it is said to be 'deleted'.
> Repositories may or may not keep track of deletions. If a repository does
> not keep track of deletions then such records will simply vanish from
> responses and there will be no way for a harvester to discover deletions
> through continued incremental harvesting. If a repository does keep track
> of deletions then the datestamp of the deleted record _must_ be the date
> and time that it was deleted. Responses to a GetRecord request for a
> deleted record _must_ then include a header with the attribute
> status="deleted" and no metadata or about parts. Similarly, responses to
> selective harvesting requests with set membership and date range criteria
> that include deleted records _must_ include the headers of these records.
> Incremental harvesting will thus discover deletions from repositories
> that keep track of them. Repositories must indicate their level of
> support for deletions in the deletedRecord element of the Identify
> response.
>
> Note that deleted status is a property of individual records. Like a
> normal record, a deleted record is identified by a unique identifier, a
> metadataPrefix and a datestamp. Other records, with different
> metadataPrefix but the same unique identifier, may remain available for
> the an item.
>
>
> 8) Change schema to defined a type for protocolVersion instead of using
> an anonymous definition (ALREADY DONE, 2004-03-29)
>
> 8.1) Motivation
>
> To allow reuse as part of the Static Repository schema
> http://www.openarchives.org/OAI/2.0/OAI-PMH-static-repository.xsd
>
> 8.2) Impact
>
> None except as noted in motivation. Schema semantics unchanged; all
> validating instances will still validate.
>
> 8.3) Change to OAI-PMH.xsd
>
> 98,104c100
> <       <element name="protocolVersion">
> <         <simpleType>
> <           <restriction base="string">
> <             <enumeration value="2.0"/>
> <           </restriction>
> <         </simpleType>
> <       </element>
> ---
> >       <element name="protocolVersion" type="oai:protocolVersionType"/>
> 192a189
> >
> 253a251,256
> >
> >   <simpleType name="protocolVersionType">
> >     <restriction base="string">
> >       <enumeration value="2.0"/>
> >     </restriction>
> >   </simpleType>
>
> (old version available as
> http://www.openarchives.org/OAI/2.0/OAI-PMH.2002-06-13.xsd)
>

From simeon at cs.cornell.edu  Thu Sep 16 19:31:29 2004
From: simeon at cs.cornell.edu (Simeon Warner)
Date: Thu Sep 16 19:32:01 2004
Subject: [OAI-implementers] Part II: Proposed corrections/fixes to OAI-PMH
 protocol document and schema
Message-ID: <Pine.LNX.4.58.0409161928190.28886@dhcp103-124.cs.cornell.edu>


I'd like to solicit further comment regarding issues 1 and 2 of the set of
proposed corrections and fixes to the OAI-PMH protocol document and schema
that I sent back in June (copied below, alternatively see:
http://openarchives.org/pipermail/oai-implementers/2004-June/001216.html).
These are really the same issue repeated for both setSpec and
metadataPrefix. Both cases involve the same two parts which I describe
below: part A I assume is not controversial; part B Hussein commented on.
A lack of other comments presumably indicates lack of other objections but
I'd like to confirm that since the proposal will involve minor changes in
some implementations.


A) The values of setSpec and metadataPrefix permitted protocol document
and the by the schema simply do not agree. This should be corrected.

The meaning of the current wording "any characters that are safe in a
query component of a URI" is unclear and cannot be construed to agree with
the schema.  I suggest the simplest way to clarify and fix this is to
rephrase as "a string consisting of any valid URI 'unreserved' characters"
which would give the following changes in allowed values (both of which
add ~ and disallow $ and + ):

setSpec from:
<pattern value="([A-Za-z0-9_!'$\(\)\+\-\.\*])+(:[A-Za-z0-9_!'$\(\)\+\-\.\*]+)*"/>
to:
<pattern value="([A-Za-z0-9\-_\.!~\*'\(\)])+(:[A-Za-z0-9\-_\.!~\*'\(\)]+)*"/>

metadataPrefix from:
<pattern value="[A-Za-z0-9_!'$\(\)\+\-\.\*]+"/>
to:
<pattern value="[A-Za-z0-9\-_\.!~\*'\(\)]+"/>

The setSpec pattern is more complicated because elements are separated by
colons [:].


B) There should be some standard way to permit straightforward use,
perhaps via escaping, of setSpec and metadataPrefix values native to
repositories.

The suggestion is to permit URI "escaped" characters (%xx where xx are two
hex digits). I note that a number of repositories have already adopted
encoding using hex but that in most cases the escape character is simply
omitted; in a few cases another escape character has been chosen (e.g. *)
because % is not permitted. The fact that implementers are already doing
this demonstrates a desire to encode values native to other systems.
Permitting URI "escaped" characters is a simple way to standardize this
using and well-known escaping mechanism without significantly increasing
complexity.

Alternatives include:

1) Use another escaping mechanism. Another obvious choice would be to use
XML numeric entities (e.g. '&#58;' (decimal) or '&#x3A;' (hex) for a
quotation mark).  These entities would themselves have to be escaped in
XML responses (otherwise you have alternative 2) so responses might
include XML of the form <setSpec>&amp;#x3A;</setSpec> to encode a setSpec
which is internally a colon [:]. One might also want to restrict to
just-decimal or just-hex to reduce complexity. It seems to me that one
ends up with a complex set of restrictions on XML entity encoding which
largely negate any benefit of adopting that standard. Perhaps there is
another good option?

2) Permit a much larger character set in the first place (the limit being
"anything" - the XML schema "string" type). I see three issues with this.
First, when OAI-PMH was first designed we decided on a limited character
set to make implementation easier, I think this still has some merit.
Second, in the setSpec there will always be a potential need to escape a
colon [:], since that has special meaning in OAI-PMH (which may not
correspond to use in values native to a repository). Third, this would be
a significant change requiring updates to most harvesting software.
Significant extension of the character set is beyond the scope of the
present proposal.

3) Do not include a standard way to permit the use of setSpec and
metadataPrefix values native to repositories (simply make the protocol
document and schema agree as described in A).

Note that this issue is quite separate from URL-encoding of OAI requests
made over HTTP. Characters used in any escaping mechanism for setSpec and
metadataPrefix may need to be further escaped when used in URLs.

On Mon, 21 Jun 2004, Hussein Suleman wrote:
...
> 1/2: i have some reservations about us requiring URL-encoding within
> XML. this mixes syntax with intended semantics of use and further
> entrenches the implicit support for URL-encoding, which is irrelevant
> if, for example, OAI-PMH makes the jump to using a SOAP request/response
> model. the model and abstractions must be clean and separable, they
> arent quite so already and i would prefer they didnt get more complicated.

In response, I don't think the proposal was to _require_ URL-encoding. It
was to allow it at a data-provider's choice; service providers should (in
the absence of other information, e.g. oai_dc is special) treat both
setSpec and metadataPrefix values as opaque tokens. OAI-PMH's special use
of the colon means that this issue would not entirely go away even if
OAI-PMH used an XML-clean transport such as SOAP, and we were no longer
concerned about the burden on harvesters of permitting any string to be
used.


Ug, that got longer than I hoped...

Cheers,
Simeon


> Simeon Warner wrote:
> > ...
> > PROPOSED FIXES TO OAI PROTOCOL DOCUMENT AND SCHEMA
> > --------------------------------------------------
> >
> > 1) Correct protocol document and schema definition of setSpec to be
> > consistent, and also to permit the use of URL encoding.
> >
> > 1.1) Motivation
> >
> > First, the protocol document and the schema simply do not agree. The use
> > of the wording "any characters that are safe in a query component of a
> > URI" is unclear and cannot be construed to agree with the schema. Second,
> > many repositories are using URL-like encoding to create setSpecs so it
> > seems better to permit the recognized URL encoding. The practical change
> > to meet both of these criteria is very small: the schema regular
> > expression should be changed to remove $ and +, and to add ~ and %xx (URL
> > encoding). This will bring the protocol document in line with the terms
> > "escaped" and "unreserved" as used in the URI RFC.
> >
> > 1.2) Impact
> >
> > The only conforming repository that we know of using setSpecs affected by
> > this change is Jeff Young's OpenURL repository
> > (http://alcme.oclc.org/openurl/servlet/OAIHandler) where he uses '+' as
> > an encoding for space. Jeff agrees that a change would be sensible and
> > that he could be replace '+' with '%20'. Repositories using URL-like
> > encodings will not be affected although they may choose to change to use
> > real URL encoding. All OAI software maintainers should, however, review
> > the change and update their parsing code accordingly.
> >
> > 1.3) Changes
> >
> > 1.3.1) Change wording in protocol document
> > http://www.openarchives.org/OAI/2.0/openarchivesprotocol.htm#Set
> > from:
> >
> > a setSpec -- a colon [:] separated list indicating the path from the root
> > of the set hierarchy to the respective node.  Each element in the list is
> > a string consisting of any characters that are safe in a query component
> > of a URI , which must not contain any colons [ :].  Since a setSpec forms
> > a unique identifier for the set within the repository, it must be unique
> > for each set.  Flat set organizations have only sets with setSpec that do
> > not contain any colons [ :].
> >
> > to:
> >
> > a setSpec -- a colon [:] separated list indicating the path from the root
> > of the set hierarchy to the respective node. Each element in the list is a
> > string consisting of any valid URI "unreserved" and "escaped" characters.
> > A setTag must not contain URI "reserved" characters, for example the colon
> > [:] which is used to delimit setTags. Since a setSpec forms a unique
> > identifier for the set within the repository, it must be unique for each
> > set. Flat set organizations have only sets with setSpec that do not
> > contain any colons [:].
> >
> > The corresponding parts of the specification of allowed characters in URIs
> > are:
> >
> > unreserved    = alphanum | mark
> > mark          = "-" | "_" | "." | "!" | "~" | "*" | "'" |
> >                 "(" | ")"
> > escaped       = "%" hex hex
> > hex           = digit | "A" | "B" | "C" | "D" | "E" | "F" |
> >                 "a" | "b" | "c" | "d" | "e" | "f"
> >
> >
> > 1.3.2) Change definition of setSpecType in the schema to match the definition
> > from:
> >
> >  <simpleType name="setSpecType">
> >     <restriction base="string">
> >       <pattern value=
> >        "([A-Za-z0-9_!'$\(\)\+\-\.\*])+(:[A-Za-z0-9_!'$\(\)\+\-\.\*]+)*"/>
> >     </restriction>
> >   </simpleType>
> >
> > to:
> >
> >   <simpleType name="setSpecType">
> >     <restriction base="string">
> >       <pattern value="([A-Za-z0-9\-_\.!~\*'\(\)]|(%[A-Fa-f0-9]{2}))+(:([A-Za-z0-9\-_\.!~\*'\(\)]|(%[A-Fa-f0-9]{2}))+)*"/>
> >     </restriction>
> >   </simpleType>
> >
> >
> > 2) Correct protocol document and schema definition for metadataPrefix to
> > be consistent, and also to match the revised setSpec definition.
> >
> > 2.1) Motivation
> >
> > The protocol document uses the same imprecise wording for metadataPrefix
> > as it does for setSpec ("any characters that are safe in a query
> > component of a URI") and the schema does not even follow a reasonable
> > interpretation of this wording. It seems sensible to use the same
> > character restrictions in a consistent fashion. This will bring the
> > protocol document in line with the terms "escaped" and "unreserved" as
> > used in the URI RFC.
> >
> > 2.2) Impact
> >
> > This change is not expected to impact any known repository.  All OAI
> > software maintainers should, however, review the change and update their
> > parsing code accordingly.
> >
> > 2.3) Changes
> >
> > 2.2.1) Change wording in protocol document
> > http://www.openarchives.org/OAI/2.0/openarchivesprotocol.htm#metadataPrefix
> > from:
> >
> > The metadataPrefix - a string to specify the metadata format in OAI-PMH
> > requests issued to the repository. metadataPrefix consists of any
> > characters that are safe in a query component of a URI. metadataPrefix
> > arguments are used in ListRecords, ListIdentifiers, and GetRecord
> > requests to retrieve records, or the headers of records that include
> > metadata in the format specified by the metadataPrefix;
> >
> > to:
> >
> > The metadataPrefix - a string to specify the metadata format in OAI-PMH
> > requests issued to the repository. metadataPrefix consists of any valid
> > URI "unreserved" and "escaped"  characters. A metadataPrefix must not
> > contain URI "reserved" characters. metadataPrefix arguments are used in
> > ListRecords, ListIdentifiers, and GetRecord requests to retrieve records,
> > or the headers of records that include metadata in the format specified
> > by the metadataPrefix;
> >
> > 2.3.2) Change definition of metadataPrefixType in schema to match the
> > definition from:
> >
> >   <simpleType name="metadataPrefixType">
> >     <restriction base="string">
> >       <pattern value="[A-Za-z0-9_!'$\(\)\+\-\.\*]+"/>
> >     </restriction>
> >   </simpleType>
> >
> > to:
> >
> >   <simpleType name="metadataPrefixType">
> >     <restriction base="string">
> >       <pattern value="([A-Za-z0-9\-_\.!~\*'\(\)]|(%[A-Fa-f0-9]{2}))+"/>
> >     </restriction>
> >   </simpleType>


----------------------------------------------------------
Simeon Warner                 Email: simeon@cs.cornell.edu
Cornell Information Science              Tel: 607-254-8605
301 College Ave                          Fax: 607-255-5196
Ithaca, NY 14850-4623, USA


From hussein at cs.uct.ac.za  Mon Sep 20 12:13:16 2004
From: hussein at cs.uct.ac.za (Hussein Suleman)
Date: Mon Sep 20 12:13:51 2004
Subject: [OAI-implementers] Part II: Proposed corrections/fixes to OAI-PMH
	protocol document and schema
In-Reply-To: <Pine.LNX.4.58.0409161928190.28886@dhcp103-124.cs.cornell.edu>
References: <Pine.LNX.4.58.0409161928190.28886@dhcp103-124.cs.cornell.edu>
Message-ID: <414F019C.2010501@cs.uct.ac.za>

hi Simeon (et al)

to follow on, i agree that we will always need to escape ":" because of 
PMH semantics.

the clean solution is to propose the use of a special OAI escape 
character, say "!". then, we could use the forward mapping:
   : -> !:
   ! -> !!
then, specify that setSpecs and mdps are simply unrestricted Unicode, 
with service providers having to apply URL-encoding when submitting 
requests involving setSpecs and mdps, and data providers having to apply 
XML encoding when returning such information (with reverse 
transformation as needed). there are a few other issues here - like 
Unicode use in URLs, but lets punt on that for now ...

now, i know this proposes to change semantics - i believe we are already 
on the slippery slope of trying to patch things up by introducing more 
complexity and greater reliance on basic HTTP.

practically, in the short term, i support option 3, to tackle only issue 
A and not issue B. in the long term, maybe when we consider SOAP, we 
really should clean up the data model.

ttfn,
----hussein


Simeon Warner wrote:

> I'd like to solicit further comment regarding issues 1 and 2 of the set of
> proposed corrections and fixes to the OAI-PMH protocol document and schema
> that I sent back in June (copied below, alternatively see:
> http://openarchives.org/pipermail/oai-implementers/2004-June/001216.html).
> These are really the same issue repeated for both setSpec and
> metadataPrefix. Both cases involve the same two parts which I describe
> below: part A I assume is not controversial; part B Hussein commented on.
> A lack of other comments presumably indicates lack of other objections but
> I'd like to confirm that since the proposal will involve minor changes in
> some implementations.
> 
> 
> A) The values of setSpec and metadataPrefix permitted protocol document
> and the by the schema simply do not agree. This should be corrected.
> 
> The meaning of the current wording "any characters that are safe in a
> query component of a URI" is unclear and cannot be construed to agree with
> the schema.  I suggest the simplest way to clarify and fix this is to
> rephrase as "a string consisting of any valid URI 'unreserved' characters"
> which would give the following changes in allowed values (both of which
> add ~ and disallow $ and + ):
> 
> setSpec from:
> <pattern value="([A-Za-z0-9_!'$\(\)\+\-\.\*])+(:[A-Za-z0-9_!'$\(\)\+\-\.\*]+)*"/>
> to:
> <pattern value="([A-Za-z0-9\-_\.!~\*'\(\)])+(:[A-Za-z0-9\-_\.!~\*'\(\)]+)*"/>
> 
> metadataPrefix from:
> <pattern value="[A-Za-z0-9_!'$\(\)\+\-\.\*]+"/>
> to:
> <pattern value="[A-Za-z0-9\-_\.!~\*'\(\)]+"/>
> 
> The setSpec pattern is more complicated because elements are separated by
> colons [:].
> 
> 
> B) There should be some standard way to permit straightforward use,
> perhaps via escaping, of setSpec and metadataPrefix values native to
> repositories.
> 
> The suggestion is to permit URI "escaped" characters (%xx where xx are two
> hex digits). I note that a number of repositories have already adopted
> encoding using hex but that in most cases the escape character is simply
> omitted; in a few cases another escape character has been chosen (e.g. *)
> because % is not permitted. The fact that implementers are already doing
> this demonstrates a desire to encode values native to other systems.
> Permitting URI "escaped" characters is a simple way to standardize this
> using and well-known escaping mechanism without significantly increasing
> complexity.
> 
> Alternatives include:
> 
> 1) Use another escaping mechanism. Another obvious choice would be to use
> XML numeric entities (e.g. '&#58;' (decimal) or '&#x3A;' (hex) for a
> quotation mark).  These entities would themselves have to be escaped in
> XML responses (otherwise you have alternative 2) so responses might
> include XML of the form <setSpec>&amp;#x3A;</setSpec> to encode a setSpec
> which is internally a colon [:]. One might also want to restrict to
> just-decimal or just-hex to reduce complexity. It seems to me that one
> ends up with a complex set of restrictions on XML entity encoding which
> largely negate any benefit of adopting that standard. Perhaps there is
> another good option?
> 
> 2) Permit a much larger character set in the first place (the limit being
> "anything" - the XML schema "string" type). I see three issues with this.
> First, when OAI-PMH was first designed we decided on a limited character
> set to make implementation easier, I think this still has some merit.
> Second, in the setSpec there will always be a potential need to escape a
> colon [:], since that has special meaning in OAI-PMH (which may not
> correspond to use in values native to a repository). Third, this would be
> a significant change requiring updates to most harvesting software.
> Significant extension of the character set is beyond the scope of the
> present proposal.
> 
> 3) Do not include a standard way to permit the use of setSpec and
> metadataPrefix values native to repositories (simply make the protocol
> document and schema agree as described in A).
> 
> Note that this issue is quite separate from URL-encoding of OAI requests
> made over HTTP. Characters used in any escaping mechanism for setSpec and
> metadataPrefix may need to be further escaped when used in URLs.
> 
> On Mon, 21 Jun 2004, Hussein Suleman wrote:
> ...
> 
>>1/2: i have some reservations about us requiring URL-encoding within
>>XML. this mixes syntax with intended semantics of use and further
>>entrenches the implicit support for URL-encoding, which is irrelevant
>>if, for example, OAI-PMH makes the jump to using a SOAP request/response
>>model. the model and abstractions must be clean and separable, they
>>arent quite so already and i would prefer they didnt get more complicated.
> 
> 
> In response, I don't think the proposal was to _require_ URL-encoding. It
> was to allow it at a data-provider's choice; service providers should (in
> the absence of other information, e.g. oai_dc is special) treat both
> setSpec and metadataPrefix values as opaque tokens. OAI-PMH's special use
> of the colon means that this issue would not entirely go away even if
> OAI-PMH used an XML-clean transport such as SOAP, and we were no longer
> concerned about the burden on harvesters of permitting any string to be
> used.
> 
> 
> Ug, that got longer than I hoped...
> 
> Cheers,
> Simeon
> 
> 
> 
>>Simeon Warner wrote:
>>
>>>...
>>>PROPOSED FIXES TO OAI PROTOCOL DOCUMENT AND SCHEMA
>>>--------------------------------------------------
>>>
>>>1) Correct protocol document and schema definition of setSpec to be
>>>consistent, and also to permit the use of URL encoding.
>>>
>>>1.1) Motivation
>>>
>>>First, the protocol document and the schema simply do not agree. The use
>>>of the wording "any characters that are safe in a query component of a
>>>URI" is unclear and cannot be construed to agree with the schema. Second,
>>>many repositories are using URL-like encoding to create setSpecs so it
>>>seems better to permit the recognized URL encoding. The practical change
>>>to meet both of these criteria is very small: the schema regular
>>>expression should be changed to remove $ and +, and to add ~ and %xx (URL
>>>encoding). This will bring the protocol document in line with the terms
>>>"escaped" and "unreserved" as used in the URI RFC.
>>>
>>>1.2) Impact
>>>
>>>The only conforming repository that we know of using setSpecs affected by
>>>this change is Jeff Young's OpenURL repository
>>>(http://alcme.oclc.org/openurl/servlet/OAIHandler) where he uses '+' as
>>>an encoding for space. Jeff agrees that a change would be sensible and
>>>that he could be replace '+' with '%20'. Repositories using URL-like
>>>encodings will not be affected although they may choose to change to use
>>>real URL encoding. All OAI software maintainers should, however, review
>>>the change and update their parsing code accordingly.
>>>
>>>1.3) Changes
>>>
>>>1.3.1) Change wording in protocol document
>>>http://www.openarchives.org/OAI/2.0/openarchivesprotocol.htm#Set
>>>from:
>>>
>>>a setSpec -- a colon [:] separated list indicating the path from the root
>>>of the set hierarchy to the respective node.  Each element in the list is
>>>a string consisting of any characters that are safe in a query component
>>>of a URI , which must not contain any colons [ :].  Since a setSpec forms
>>>a unique identifier for the set within the repository, it must be unique
>>>for each set.  Flat set organizations have only sets with setSpec that do
>>>not contain any colons [ :].
>>>
>>>to:
>>>
>>>a setSpec -- a colon [:] separated list indicating the path from the root
>>>of the set hierarchy to the respective node. Each element in the list is a
>>>string consisting of any valid URI "unreserved" and "escaped" characters.
>>>A setTag must not contain URI "reserved" characters, for example the colon
>>>[:] which is used to delimit setTags. Since a setSpec forms a unique
>>>identifier for the set within the repository, it must be unique for each
>>>set. Flat set organizations have only sets with setSpec that do not
>>>contain any colons [:].
>>>
>>>The corresponding parts of the specification of allowed characters in URIs
>>>are:
>>>
>>>unreserved    = alphanum | mark
>>>mark          = "-" | "_" | "." | "!" | "~" | "*" | "'" |
>>>                "(" | ")"
>>>escaped       = "%" hex hex
>>>hex           = digit | "A" | "B" | "C" | "D" | "E" | "F" |
>>>                "a" | "b" | "c" | "d" | "e" | "f"
>>>
>>>
>>>1.3.2) Change definition of setSpecType in the schema to match the definition
>>>from:
>>>
>>> <simpleType name="setSpecType">
>>>    <restriction base="string">
>>>      <pattern value=
>>>       "([A-Za-z0-9_!'$\(\)\+\-\.\*])+(:[A-Za-z0-9_!'$\(\)\+\-\.\*]+)*"/>
>>>    </restriction>
>>>  </simpleType>
>>>
>>>to:
>>>
>>>  <simpleType name="setSpecType">
>>>    <restriction base="string">
>>>      <pattern value="([A-Za-z0-9\-_\.!~\*'\(\)]|(%[A-Fa-f0-9]{2}))+(:([A-Za-z0-9\-_\.!~\*'\(\)]|(%[A-Fa-f0-9]{2}))+)*"/>
>>>    </restriction>
>>>  </simpleType>
>>>
>>>
>>>2) Correct protocol document and schema definition for metadataPrefix to
>>>be consistent, and also to match the revised setSpec definition.
>>>
>>>2.1) Motivation
>>>
>>>The protocol document uses the same imprecise wording for metadataPrefix
>>>as it does for setSpec ("any characters that are safe in a query
>>>component of a URI") and the schema does not even follow a reasonable
>>>interpretation of this wording. It seems sensible to use the same
>>>character restrictions in a consistent fashion. This will bring the
>>>protocol document in line with the terms "escaped" and "unreserved" as
>>>used in the URI RFC.
>>>
>>>2.2) Impact
>>>
>>>This change is not expected to impact any known repository.  All OAI
>>>software maintainers should, however, review the change and update their
>>>parsing code accordingly.
>>>
>>>2.3) Changes
>>>
>>>2.2.1) Change wording in protocol document
>>>http://www.openarchives.org/OAI/2.0/openarchivesprotocol.htm#metadataPrefix
>>>from:
>>>
>>>The metadataPrefix - a string to specify the metadata format in OAI-PMH
>>>requests issued to the repository. metadataPrefix consists of any
>>>characters that are safe in a query component of a URI. metadataPrefix
>>>arguments are used in ListRecords, ListIdentifiers, and GetRecord
>>>requests to retrieve records, or the headers of records that include
>>>metadata in the format specified by the metadataPrefix;
>>>
>>>to:
>>>
>>>The metadataPrefix - a string to specify the metadata format in OAI-PMH
>>>requests issued to the repository. metadataPrefix consists of any valid
>>>URI "unreserved" and "escaped"  characters. A metadataPrefix must not
>>>contain URI "reserved" characters. metadataPrefix arguments are used in
>>>ListRecords, ListIdentifiers, and GetRecord requests to retrieve records,
>>>or the headers of records that include metadata in the format specified
>>>by the metadataPrefix;
>>>
>>>2.3.2) Change definition of metadataPrefixType in schema to match the
>>>definition from:
>>>
>>>  <simpleType name="metadataPrefixType">
>>>    <restriction base="string">
>>>      <pattern value="[A-Za-z0-9_!'$\(\)\+\-\.\*]+"/>
>>>    </restriction>
>>>  </simpleType>
>>>
>>>to:
>>>
>>>  <simpleType name="metadataPrefixType">
>>>    <restriction base="string">
>>>      <pattern value="([A-Za-z0-9\-_\.!~\*'\(\)]|(%[A-Fa-f0-9]{2}))+"/>
>>>    </restriction>
>>>  </simpleType>
> 
> 
> 
> ----------------------------------------------------------
> Simeon Warner                 Email: simeon@cs.cornell.edu
> Cornell Information Science              Tel: 607-254-8605
> 301 College Ave                          Fax: 607-255-5196
> Ithaca, NY 14850-4623, USA
> 
> 
> _______________________________________________
> OAI-implementers mailing list
> List information, archives, preferences and to unsubscribe:
> http://openarchives.org/mailman/listinfo/oai-implementers
> 

-- 
=====================================================================
hussein suleman ~ hussein@cs.uct.ac.za ~ http://www.husseinsspace.com
=====================================================================


From tdb01r at ecs.soton.ac.uk  Tue Sep 21 08:01:12 2004
From: tdb01r at ecs.soton.ac.uk (Tim Brody)
Date: Tue Sep 21 08:01:36 2004
Subject: [OAI-implementers] Part II: Proposed corrections/fixes to
	OAI-PMHprotocol document and schema
References: <Pine.LNX.4.58.0409161928190.28886@dhcp103-124.cs.cornell.edu>
	<414F019C.2010501@cs.uct.ac.za>
Message-ID: <0fe501c49fd2$b33c2b70$14414e98@Shrek>

I would remove the protocol definition of the "magic colon" hierarchy in
Sets, and make the Prefix and Set arguments anyString.

The use of structured data in request arguments is confusing and
unnecessary.

When/if an official SOAP definition of OAI is released I would recommend
replacing Prefix with the schema URL. There also needs to be a solution to
the record moving out of set problem ...

All the best,
Tim.

----- Original Message ----- 
From: "Hussein Suleman" <hussein@cs.uct.ac.za>
To: <oai-implementers@oaisrv.nsdl.cornell.edu>
Cc: "Simeon Warner" <simeon@cs.cornell.edu>
Sent: Monday, September 20, 2004 5:13 PM
Subject: Re: [OAI-implementers] Part II: Proposed corrections/fixes to
OAI-PMHprotocol document and schema


> hi Simeon (et al)
>
> to follow on, i agree that we will always need to escape ":" because of
> PMH semantics.
>
> the clean solution is to propose the use of a special OAI escape
> character, say "!". then, we could use the forward mapping:
>    : -> !:
>    ! -> !!
> then, specify that setSpecs and mdps are simply unrestricted Unicode,
> with service providers having to apply URL-encoding when submitting
> requests involving setSpecs and mdps, and data providers having to apply
> XML encoding when returning such information (with reverse
> transformation as needed). there are a few other issues here - like
> Unicode use in URLs, but lets punt on that for now ...
>
> now, i know this proposes to change semantics - i believe we are already
> on the slippery slope of trying to patch things up by introducing more
> complexity and greater reliance on basic HTTP.
>
> practically, in the short term, i support option 3, to tackle only issue
> A and not issue B. in the long term, maybe when we consider SOAP, we
> really should clean up the data model.
>
> ttfn,
> ----hussein
>
>
> Simeon Warner wrote:
>
> > I'd like to solicit further comment regarding issues 1 and 2 of the set
of
> > proposed corrections and fixes to the OAI-PMH protocol document and
schema
> > that I sent back in June (copied below, alternatively see:
> >
http://openarchives.org/pipermail/oai-implementers/2004-June/001216.html).
> > These are really the same issue repeated for both setSpec and
> > metadataPrefix. Both cases involve the same two parts which I describe
> > below: part A I assume is not controversial; part B Hussein commented
on.
> > A lack of other comments presumably indicates lack of other objections
but
> > I'd like to confirm that since the proposal will involve minor changes
in
> > some implementations.
> >
> >
> > A) The values of setSpec and metadataPrefix permitted protocol document
> > and the by the schema simply do not agree. This should be corrected.
> >
> > The meaning of the current wording "any characters that are safe in a
> > query component of a URI" is unclear and cannot be construed to agree
with
> > the schema.  I suggest the simplest way to clarify and fix this is to
> > rephrase as "a string consisting of any valid URI 'unreserved'
characters"
> > which would give the following changes in allowed values (both of which
> > add ~ and disallow $ and + ):
> >
> > setSpec from:
> > <pattern
value="([A-Za-z0-9_!'$\(\)\+\-\.\*])+(:[A-Za-z0-9_!'$\(\)\+\-\.\*]+)*"/>
> > to:
> > <pattern
value="([A-Za-z0-9\-_\.!~\*'\(\)])+(:[A-Za-z0-9\-_\.!~\*'\(\)]+)*"/>
> >
> > metadataPrefix from:
> > <pattern value="[A-Za-z0-9_!'$\(\)\+\-\.\*]+"/>
> > to:
> > <pattern value="[A-Za-z0-9\-_\.!~\*'\(\)]+"/>
> >
> > The setSpec pattern is more complicated because elements are separated
by
> > colons [:].
> >
> >
> > B) There should be some standard way to permit straightforward use,
> > perhaps via escaping, of setSpec and metadataPrefix values native to
> > repositories.
> >
> > The suggestion is to permit URI "escaped" characters (%xx where xx are
two
> > hex digits). I note that a number of repositories have already adopted
> > encoding using hex but that in most cases the escape character is simply
> > omitted; in a few cases another escape character has been chosen (e.g.
*)
> > because % is not permitted. The fact that implementers are already doing
> > this demonstrates a desire to encode values native to other systems.
> > Permitting URI "escaped" characters is a simple way to standardize this
> > using and well-known escaping mechanism without significantly increasing
> > complexity.
> >
> > Alternatives include:
> >
> > 1) Use another escaping mechanism. Another obvious choice would be to
use
> > XML numeric entities (e.g. '&#58;' (decimal) or '&#x3A;' (hex) for a
> > quotation mark).  These entities would themselves have to be escaped in
> > XML responses (otherwise you have alternative 2) so responses might
> > include XML of the form <setSpec>&amp;#x3A;</setSpec> to encode a
setSpec
> > which is internally a colon [:]. One might also want to restrict to
> > just-decimal or just-hex to reduce complexity. It seems to me that one
> > ends up with a complex set of restrictions on XML entity encoding which
> > largely negate any benefit of adopting that standard. Perhaps there is
> > another good option?
> >
> > 2) Permit a much larger character set in the first place (the limit
being
> > "anything" - the XML schema "string" type). I see three issues with
this.
> > First, when OAI-PMH was first designed we decided on a limited character
> > set to make implementation easier, I think this still has some merit.
> > Second, in the setSpec there will always be a potential need to escape a
> > colon [:], since that has special meaning in OAI-PMH (which may not
> > correspond to use in values native to a repository). Third, this would
be
> > a significant change requiring updates to most harvesting software.
> > Significant extension of the character set is beyond the scope of the
> > present proposal.
> >
> > 3) Do not include a standard way to permit the use of setSpec and
> > metadataPrefix values native to repositories (simply make the protocol
> > document and schema agree as described in A).
> >
> > Note that this issue is quite separate from URL-encoding of OAI requests
> > made over HTTP. Characters used in any escaping mechanism for setSpec
and
> > metadataPrefix may need to be further escaped when used in URLs.
> >
> > On Mon, 21 Jun 2004, Hussein Suleman wrote:
> > ...
> >
> >>1/2: i have some reservations about us requiring URL-encoding within
> >>XML. this mixes syntax with intended semantics of use and further
> >>entrenches the implicit support for URL-encoding, which is irrelevant
> >>if, for example, OAI-PMH makes the jump to using a SOAP request/response
> >>model. the model and abstractions must be clean and separable, they
> >>arent quite so already and i would prefer they didnt get more
complicated.
> >
> >
> > In response, I don't think the proposal was to _require_ URL-encoding.
It
> > was to allow it at a data-provider's choice; service providers should
(in
> > the absence of other information, e.g. oai_dc is special) treat both
> > setSpec and metadataPrefix values as opaque tokens. OAI-PMH's special
use
> > of the colon means that this issue would not entirely go away even if
> > OAI-PMH used an XML-clean transport such as SOAP, and we were no longer
> > concerned about the burden on harvesters of permitting any string to be
> > used.
> >
> >
> > Ug, that got longer than I hoped...
> >
> > Cheers,
> > Simeon
> >
> >
> >
> >>Simeon Warner wrote:
> >>
> >>>...
> >>>PROPOSED FIXES TO OAI PROTOCOL DOCUMENT AND SCHEMA
> >>>--------------------------------------------------
> >>>
> >>>1) Correct protocol document and schema definition of setSpec to be
> >>>consistent, and also to permit the use of URL encoding.
> >>>
> >>>1.1) Motivation
> >>>
> >>>First, the protocol document and the schema simply do not agree. The
use
> >>>of the wording "any characters that are safe in a query component of a
> >>>URI" is unclear and cannot be construed to agree with the schema.
Second,
> >>>many repositories are using URL-like encoding to create setSpecs so it
> >>>seems better to permit the recognized URL encoding. The practical
change
> >>>to meet both of these criteria is very small: the schema regular
> >>>expression should be changed to remove $ and +, and to add ~ and %xx
(URL
> >>>encoding). This will bring the protocol document in line with the terms
> >>>"escaped" and "unreserved" as used in the URI RFC.
> >>>
> >>>1.2) Impact
> >>>
> >>>The only conforming repository that we know of using setSpecs affected
by
> >>>this change is Jeff Young's OpenURL repository
> >>>(http://alcme.oclc.org/openurl/servlet/OAIHandler) where he uses '+' as
> >>>an encoding for space. Jeff agrees that a change would be sensible and
> >>>that he could be replace '+' with '%20'. Repositories using URL-like
> >>>encodings will not be affected although they may choose to change to
use
> >>>real URL encoding. All OAI software maintainers should, however, review
> >>>the change and update their parsing code accordingly.
> >>>
> >>>1.3) Changes
> >>>
> >>>1.3.1) Change wording in protocol document
> >>>http://www.openarchives.org/OAI/2.0/openarchivesprotocol.htm#Set
> >>>from:
> >>>
> >>>a setSpec -- a colon [:] separated list indicating the path from the
root
> >>>of the set hierarchy to the respective node.  Each element in the list
is
> >>>a string consisting of any characters that are safe in a query
component
> >>>of a URI , which must not contain any colons [ :].  Since a setSpec
forms
> >>>a unique identifier for the set within the repository, it must be
unique
> >>>for each set.  Flat set organizations have only sets with setSpec that
do
> >>>not contain any colons [ :].
> >>>
> >>>to:
> >>>
> >>>a setSpec -- a colon [:] separated list indicating the path from the
root
> >>>of the set hierarchy to the respective node. Each element in the list
is a
> >>>string consisting of any valid URI "unreserved" and "escaped"
characters.
> >>>A setTag must not contain URI "reserved" characters, for example the
colon
> >>>[:] which is used to delimit setTags. Since a setSpec forms a unique
> >>>identifier for the set within the repository, it must be unique for
each
> >>>set. Flat set organizations have only sets with setSpec that do not
> >>>contain any colons [:].
> >>>
> >>>The corresponding parts of the specification of allowed characters in
URIs
> >>>are:
> >>>
> >>>unreserved    = alphanum | mark
> >>>mark          = "-" | "_" | "." | "!" | "~" | "*" | "'" |
> >>>                "(" | ")"
> >>>escaped       = "%" hex hex
> >>>hex           = digit | "A" | "B" | "C" | "D" | "E" | "F" |
> >>>                "a" | "b" | "c" | "d" | "e" | "f"
> >>>
> >>>
> >>>1.3.2) Change definition of setSpecType in the schema to match the
definition
> >>>from:
> >>>
> >>> <simpleType name="setSpecType">
> >>>    <restriction base="string">
> >>>      <pattern value=
> >>>
"([A-Za-z0-9_!'$\(\)\+\-\.\*])+(:[A-Za-z0-9_!'$\(\)\+\-\.\*]+)*"/>
> >>>    </restriction>
> >>>  </simpleType>
> >>>
> >>>to:
> >>>
> >>>  <simpleType name="setSpecType">
> >>>    <restriction base="string">
> >>>      <pattern
value="([A-Za-z0-9\-_\.!~\*'\(\)]|(%[A-Fa-f0-9]{2}))+(:([A-Za-z0-9\-_\.!~\*'
\(\)]|(%[A-Fa-f0-9]{2}))+)*"/>
> >>>    </restriction>
> >>>  </simpleType>
> >>>
> >>>
> >>>2) Correct protocol document and schema definition for metadataPrefix
to
> >>>be consistent, and also to match the revised setSpec definition.
> >>>
> >>>2.1) Motivation
> >>>
> >>>The protocol document uses the same imprecise wording for
metadataPrefix
> >>>as it does for setSpec ("any characters that are safe in a query
> >>>component of a URI") and the schema does not even follow a reasonable
> >>>interpretation of this wording. It seems sensible to use the same
> >>>character restrictions in a consistent fashion. This will bring the
> >>>protocol document in line with the terms "escaped" and "unreserved" as
> >>>used in the URI RFC.
> >>>
> >>>2.2) Impact
> >>>
> >>>This change is not expected to impact any known repository.  All OAI
> >>>software maintainers should, however, review the change and update
their
> >>>parsing code accordingly.
> >>>
> >>>2.3) Changes
> >>>
> >>>2.2.1) Change wording in protocol document
>
>>>http://www.openarchives.org/OAI/2.0/openarchivesprotocol.htm#metadataPref
ix
> >>>from:
> >>>
> >>>The metadataPrefix - a string to specify the metadata format in OAI-PMH
> >>>requests issued to the repository. metadataPrefix consists of any
> >>>characters that are safe in a query component of a URI. metadataPrefix
> >>>arguments are used in ListRecords, ListIdentifiers, and GetRecord
> >>>requests to retrieve records, or the headers of records that include
> >>>metadata in the format specified by the metadataPrefix;
> >>>
> >>>to:
> >>>
> >>>The metadataPrefix - a string to specify the metadata format in OAI-PMH
> >>>requests issued to the repository. metadataPrefix consists of any valid
> >>>URI "unreserved" and "escaped"  characters. A metadataPrefix must not
> >>>contain URI "reserved" characters. metadataPrefix arguments are used in
> >>>ListRecords, ListIdentifiers, and GetRecord requests to retrieve
records,
> >>>or the headers of records that include metadata in the format specified
> >>>by the metadataPrefix;
> >>>
> >>>2.3.2) Change definition of metadataPrefixType in schema to match the
> >>>definition from:
> >>>
> >>>  <simpleType name="metadataPrefixType">
> >>>    <restriction base="string">
> >>>      <pattern value="[A-Za-z0-9_!'$\(\)\+\-\.\*]+"/>
> >>>    </restriction>
> >>>  </simpleType>
> >>>
> >>>to:
> >>>
> >>>  <simpleType name="metadataPrefixType">
> >>>    <restriction base="string">
> >>>      <pattern value="([A-Za-z0-9\-_\.!~\*'\(\)]|(%[A-Fa-f0-9]{2}))+"/>
> >>>    </restriction>
> >>>  </simpleType>
> >
> >
> >
> > ----------------------------------------------------------
> > Simeon Warner                 Email: simeon@cs.cornell.edu
> > Cornell Information Science              Tel: 607-254-8605
> > 301 College Ave                          Fax: 607-255-5196
> > Ithaca, NY 14850-4623, USA
> >
> >
> > _______________________________________________
> > OAI-implementers mailing list
> > List information, archives, preferences and to unsubscribe:
> > http://openarchives.org/mailman/listinfo/oai-implementers
> >
>
> -- 
> =====================================================================
> hussein suleman ~ hussein@cs.uct.ac.za ~ http://www.husseinsspace.com
> =====================================================================
>
>
> _______________________________________________
> OAI-implementers mailing list
> List information, archives, preferences and to unsubscribe:
> http://openarchives.org/mailman/listinfo/oai-implementers
>


From simeon at cs.cornell.edu  Tue Sep 21 09:29:48 2004
From: simeon at cs.cornell.edu (Simeon Warner)
Date: Tue Sep 21 09:30:20 2004
Subject: [OAI-implementers] Part II: Proposed corrections/fixes to
	OAI-PMHprotocol document and schema
In-Reply-To: <0fe501c49fd2$b33c2b70$14414e98@Shrek>
References: <Pine.LNX.4.58.0409161928190.28886@dhcp103-124.cs.cornell.edu>
	<414F019C.2010501@cs.uct.ac.za> <0fe501c49fd2$b33c2b70$14414e98@Shrek>
Message-ID: <Pine.LNX.4.58.0409210926330.19625@dhcp103-124.cs.cornell.edu>


On Tue, 21 Sep 2004, Tim Brody wrote:
> I would remove the protocol definition of the "magic colon" hierarchy in
> Sets, and make the Prefix and Set arguments anyString.

Removing the colon would change the protocol semantics. I think this is
out of scope at the moment.

Cheers,
Simeon

> The use of structured data in request arguments is confusing and
> unnecessary.
>
> When/if an official SOAP definition of OAI is released I would recommend
> replacing Prefix with the schema URL. There also needs to be a solution to
> the record moving out of set problem ...
>
> All the best,
> Tim.
>
> ----- Original Message -----
> From: "Hussein Suleman" <hussein@cs.uct.ac.za>
> To: <oai-implementers@oaisrv.nsdl.cornell.edu>
> Cc: "Simeon Warner" <simeon@cs.cornell.edu>
> Sent: Monday, September 20, 2004 5:13 PM
> Subject: Re: [OAI-implementers] Part II: Proposed corrections/fixes to
> OAI-PMHprotocol document and schema
>
>
> > hi Simeon (et al)
> >
> > to follow on, i agree that we will always need to escape ":" because of
> > PMH semantics.
> >
> > the clean solution is to propose the use of a special OAI escape
> > character, say "!". then, we could use the forward mapping:
> >    : -> !:
> >    ! -> !!
> > then, specify that setSpecs and mdps are simply unrestricted Unicode,
> > with service providers having to apply URL-encoding when submitting
> > requests involving setSpecs and mdps, and data providers having to apply
> > XML encoding when returning such information (with reverse
> > transformation as needed). there are a few other issues here - like
> > Unicode use in URLs, but lets punt on that for now ...
> >
> > now, i know this proposes to change semantics - i believe we are already
> > on the slippery slope of trying to patch things up by introducing more
> > complexity and greater reliance on basic HTTP.
> >
> > practically, in the short term, i support option 3, to tackle only issue
> > A and not issue B. in the long term, maybe when we consider SOAP, we
> > really should clean up the data model.
> >
> > ttfn,
> > ----hussein
> >
> >
> > Simeon Warner wrote:
> >
> > > I'd like to solicit further comment regarding issues 1 and 2 of the set
> of
> > > proposed corrections and fixes to the OAI-PMH protocol document and
> schema
> > > that I sent back in June (copied below, alternatively see:
> > >
> http://openarchives.org/pipermail/oai-implementers/2004-June/001216.html).
> > > These are really the same issue repeated for both setSpec and
> > > metadataPrefix. Both cases involve the same two parts which I describe
> > > below: part A I assume is not controversial; part B Hussein commented
> on.
> > > A lack of other comments presumably indicates lack of other objections
> but
> > > I'd like to confirm that since the proposal will involve minor changes
> in
> > > some implementations.
> > >
> > >
> > > A) The values of setSpec and metadataPrefix permitted protocol document
> > > and the by the schema simply do not agree. This should be corrected.
> > >
> > > The meaning of the current wording "any characters that are safe in a
> > > query component of a URI" is unclear and cannot be construed to agree
> with
> > > the schema.  I suggest the simplest way to clarify and fix this is to
> > > rephrase as "a string consisting of any valid URI 'unreserved'
> characters"
> > > which would give the following changes in allowed values (both of which
> > > add ~ and disallow $ and + ):
> > >
> > > setSpec from:
> > > <pattern
> value="([A-Za-z0-9_!'$\(\)\+\-\.\*])+(:[A-Za-z0-9_!'$\(\)\+\-\.\*]+)*"/>
> > > to:
> > > <pattern
> value="([A-Za-z0-9\-_\.!~\*'\(\)])+(:[A-Za-z0-9\-_\.!~\*'\(\)]+)*"/>
> > >
> > > metadataPrefix from:
> > > <pattern value="[A-Za-z0-9_!'$\(\)\+\-\.\*]+"/>
> > > to:
> > > <pattern value="[A-Za-z0-9\-_\.!~\*'\(\)]+"/>
> > >
> > > The setSpec pattern is more complicated because elements are separated
> by
> > > colons [:].
> > >
> > >
> > > B) There should be some standard way to permit straightforward use,
> > > perhaps via escaping, of setSpec and metadataPrefix values native to
> > > repositories.
> > >
> > > The suggestion is to permit URI "escaped" characters (%xx where xx are
> two
> > > hex digits). I note that a number of repositories have already adopted
> > > encoding using hex but that in most cases the escape character is simply
> > > omitted; in a few cases another escape character has been chosen (e.g.
> *)
> > > because % is not permitted. The fact that implementers are already doing
> > > this demonstrates a desire to encode values native to other systems.
> > > Permitting URI "escaped" characters is a simple way to standardize this
> > > using and well-known escaping mechanism without significantly increasing
> > > complexity.
> > >
> > > Alternatives include:
> > >
> > > 1) Use another escaping mechanism. Another obvious choice would be to
> use
> > > XML numeric entities (e.g. '&#58;' (decimal) or '&#x3A;' (hex) for a
> > > quotation mark).  These entities would themselves have to be escaped in
> > > XML responses (otherwise you have alternative 2) so responses might
> > > include XML of the form <setSpec>&amp;#x3A;</setSpec> to encode a
> setSpec
> > > which is internally a colon [:]. One might also want to restrict to
> > > just-decimal or just-hex to reduce complexity. It seems to me that one
> > > ends up with a complex set of restrictions on XML entity encoding which
> > > largely negate any benefit of adopting that standard. Perhaps there is
> > > another good option?
> > >
> > > 2) Permit a much larger character set in the first place (the limit
> being
> > > "anything" - the XML schema "string" type). I see three issues with
> this.
> > > First, when OAI-PMH was first designed we decided on a limited character
> > > set to make implementation easier, I think this still has some merit.
> > > Second, in the setSpec there will always be a potential need to escape a
> > > colon [:], since that has special meaning in OAI-PMH (which may not
> > > correspond to use in values native to a repository). Third, this would
> be
> > > a significant change requiring updates to most harvesting software.
> > > Significant extension of the character set is beyond the scope of the
> > > present proposal.
> > >
> > > 3) Do not include a standard way to permit the use of setSpec and
> > > metadataPrefix values native to repositories (simply make the protocol
> > > document and schema agree as described in A).
> > >
> > > Note that this issue is quite separate from URL-encoding of OAI requests
> > > made over HTTP. Characters used in any escaping mechanism for setSpec
> and
> > > metadataPrefix may need to be further escaped when used in URLs.
> > >
> > > On Mon, 21 Jun 2004, Hussein Suleman wrote:
> > > ...
> > >
> > >>1/2: i have some reservations about us requiring URL-encoding within
> > >>XML. this mixes syntax with intended semantics of use and further
> > >>entrenches the implicit support for URL-encoding, which is irrelevant
> > >>if, for example, OAI-PMH makes the jump to using a SOAP request/response
> > >>model. the model and abstractions must be clean and separable, they
> > >>arent quite so already and i would prefer they didnt get more
> complicated.
> > >
> > >
> > > In response, I don't think the proposal was to _require_ URL-encoding.
> It
> > > was to allow it at a data-provider's choice; service providers should
> (in
> > > the absence of other information, e.g. oai_dc is special) treat both
> > > setSpec and metadataPrefix values as opaque tokens. OAI-PMH's special
> use
> > > of the colon means that this issue would not entirely go away even if
> > > OAI-PMH used an XML-clean transport such as SOAP, and we were no longer
> > > concerned about the burden on harvesters of permitting any string to be
> > > used.
> > >
> > >
> > > Ug, that got longer than I hoped...
> > >
> > > Cheers,
> > > Simeon
> > >
> > >
> > >
> > >>Simeon Warner wrote:
> > >>
> > >>>...
> > >>>PROPOSED FIXES TO OAI PROTOCOL DOCUMENT AND SCHEMA
> > >>>--------------------------------------------------
> > >>>
> > >>>1) Correct protocol document and schema definition of setSpec to be
> > >>>consistent, and also to permit the use of URL encoding.
> > >>>
> > >>>1.1) Motivation
> > >>>
> > >>>First, the protocol document and the schema simply do not agree. The
> use
> > >>>of the wording "any characters that are safe in a query component of a
> > >>>URI" is unclear and cannot be construed to agree with the schema.
> Second,
> > >>>many repositories are using URL-like encoding to create setSpecs so it
> > >>>seems better to permit the recognized URL encoding. The practical
> change
> > >>>to meet both of these criteria is very small: the schema regular
> > >>>expression should be changed to remove $ and +, and to add ~ and %xx
> (URL
> > >>>encoding). This will bring the protocol document in line with the terms
> > >>>"escaped" and "unreserved" as used in the URI RFC.
> > >>>
> > >>>1.2) Impact
> > >>>
> > >>>The only conforming repository that we know of using setSpecs affected
> by
> > >>>this change is Jeff Young's OpenURL repository
> > >>>(http://alcme.oclc.org/openurl/servlet/OAIHandler) where he uses '+' as
> > >>>an encoding for space. Jeff agrees that a change would be sensible and
> > >>>that he could be replace '+' with '%20'. Repositories using URL-like
> > >>>encodings will not be affected although they may choose to change to
> use
> > >>>real URL encoding. All OAI software maintainers should, however, review
> > >>>the change and update their parsing code accordingly.
> > >>>
> > >>>1.3) Changes
> > >>>
> > >>>1.3.1) Change wording in protocol document
> > >>>http://www.openarchives.org/OAI/2.0/openarchivesprotocol.htm#Set
> > >>>from:
> > >>>
> > >>>a setSpec -- a colon [:] separated list indicating the path from the
> root
> > >>>of the set hierarchy to the respective node.  Each element in the list
> is
> > >>>a string consisting of any characters that are safe in a query
> component
> > >>>of a URI , which must not contain any colons [ :].  Since a setSpec
> forms
> > >>>a unique identifier for the set within the repository, it must be
> unique
> > >>>for each set.  Flat set organizations have only sets with setSpec that
> do
> > >>>not contain any colons [ :].
> > >>>
> > >>>to:
> > >>>
> > >>>a setSpec -- a colon [:] separated list indicating the path from the
> root
> > >>>of the set hierarchy to the respective node. Each element in the list
> is a
> > >>>string consisting of any valid URI "unreserved" and "escaped"
> characters.
> > >>>A setTag must not contain URI "reserved" characters, for example the
> colon
> > >>>[:] which is used to delimit setTags. Since a setSpec forms a unique
> > >>>identifier for the set within the repository, it must be unique for
> each
> > >>>set. Flat set organizations have only sets with setSpec that do not
> > >>>contain any colons [:].
> > >>>
> > >>>The corresponding parts of the specification of allowed characters in
> URIs
> > >>>are:
> > >>>
> > >>>unreserved    = alphanum | mark
> > >>>mark          = "-" | "_" | "." | "!" | "~" | "*" | "'" |
> > >>>                "(" | ")"
> > >>>escaped       = "%" hex hex
> > >>>hex           = digit | "A" | "B" | "C" | "D" | "E" | "F" |
> > >>>                "a" | "b" | "c" | "d" | "e" | "f"
> > >>>
> > >>>
> > >>>1.3.2) Change definition of setSpecType in the schema to match the
> definition
> > >>>from:
> > >>>
> > >>> <simpleType name="setSpecType">
> > >>>    <restriction base="string">
> > >>>      <pattern value=
> > >>>
> "([A-Za-z0-9_!'$\(\)\+\-\.\*])+(:[A-Za-z0-9_!'$\(\)\+\-\.\*]+)*"/>
> > >>>    </restriction>
> > >>>  </simpleType>
> > >>>
> > >>>to:
> > >>>
> > >>>  <simpleType name="setSpecType">
> > >>>    <restriction base="string">
> > >>>      <pattern
> value="([A-Za-z0-9\-_\.!~\*'\(\)]|(%[A-Fa-f0-9]{2}))+(:([A-Za-z0-9\-_\.!~\*'
> \(\)]|(%[A-Fa-f0-9]{2}))+)*"/>
> > >>>    </restriction>
> > >>>  </simpleType>
> > >>>
> > >>>
> > >>>2) Correct protocol document and schema definition for metadataPrefix
> to
> > >>>be consistent, and also to match the revised setSpec definition.
> > >>>
> > >>>2.1) Motivation
> > >>>
> > >>>The protocol document uses the same imprecise wording for
> metadataPrefix
> > >>>as it does for setSpec ("any characters that are safe in a query
> > >>>component of a URI") and the schema does not even follow a reasonable
> > >>>interpretation of this wording. It seems sensible to use the same
> > >>>character restrictions in a consistent fashion. This will bring the
> > >>>protocol document in line with the terms "escaped" and "unreserved" as
> > >>>used in the URI RFC.
> > >>>
> > >>>2.2) Impact
> > >>>
> > >>>This change is not expected to impact any known repository.  All OAI
> > >>>software maintainers should, however, review the change and update
> their
> > >>>parsing code accordingly.
> > >>>
> > >>>2.3) Changes
> > >>>
> > >>>2.2.1) Change wording in protocol document
> >
> >>>http://www.openarchives.org/OAI/2.0/openarchivesprotocol.htm#metadataPref
> ix
> > >>>from:
> > >>>
> > >>>The metadataPrefix - a string to specify the metadata format in OAI-PMH
> > >>>requests issued to the repository. metadataPrefix consists of any
> > >>>characters that are safe in a query component of a URI. metadataPrefix
> > >>>arguments are used in ListRecords, ListIdentifiers, and GetRecord
> > >>>requests to retrieve records, or the headers of records that include
> > >>>metadata in the format specified by the metadataPrefix;
> > >>>
> > >>>to:
> > >>>
> > >>>The metadataPrefix - a string to specify the metadata format in OAI-PMH
> > >>>requests issued to the repository. metadataPrefix consists of any valid
> > >>>URI "unreserved" and "escaped"  characters. A metadataPrefix must not
> > >>>contain URI "reserved" characters. metadataPrefix arguments are used in
> > >>>ListRecords, ListIdentifiers, and GetRecord requests to retrieve
> records,
> > >>>or the headers of records that include metadata in the format specified
> > >>>by the metadataPrefix;
> > >>>
> > >>>2.3.2) Change definition of metadataPrefixType in schema to match the
> > >>>definition from:
> > >>>
> > >>>  <simpleType name="metadataPrefixType">
> > >>>    <restriction base="string">
> > >>>      <pattern value="[A-Za-z0-9_!'$\(\)\+\-\.\*]+"/>
> > >>>    </restriction>
> > >>>  </simpleType>
> > >>>
> > >>>to:
> > >>>
> > >>>  <simpleType name="metadataPrefixType">
> > >>>    <restriction base="string">
> > >>>      <pattern value="([A-Za-z0-9\-_\.!~\*'\(\)]|(%[A-Fa-f0-9]{2}))+"/>
> > >>>    </restriction>
> > >>>  </simpleType>
> > >
> > >
> > >
> > > ----------------------------------------------------------
> > > Simeon Warner                 Email: simeon@cs.cornell.edu
> > > Cornell Information Science              Tel: 607-254-8605
> > > 301 College Ave                          Fax: 607-255-5196
> > > Ithaca, NY 14850-4623, USA
> > >
> > >
> > > _______________________________________________
> > > OAI-implementers mailing list
> > > List information, archives, preferences and to unsubscribe:
> > > http://openarchives.org/mailman/listinfo/oai-implementers
> > >
> >
> > --
> > =====================================================================
> > hussein suleman ~ hussein@cs.uct.ac.za ~ http://www.husseinsspace.com
> > =====================================================================
> >
> >
> > _______________________________________________
> > OAI-implementers mailing list
> > List information, archives, preferences and to unsubscribe:
> > http://openarchives.org/mailman/listinfo/oai-implementers
> >
>
>
> _______________________________________________
> OAI-implementers mailing list
> List information, archives, preferences and to unsubscribe:
> http://openarchives.org/mailman/listinfo/oai-implementers
>

From suryadev at bus.orst.edu  Mon Sep 27 12:23:11 2004
From: suryadev at bus.orst.edu (Venkat)
Date: Mon Sep 27 12:23:16 2004
Subject: [OAI-implementers] OAI-PMH Server setup
Message-ID: <20040927162314.3CB3817006C@smtp2.oregonstate.edu>

Hi All,
        I would like to know if I could find any documented implementation
of OAI-PMH Server. Any help regarding this is appreciated.

Thank you,
Venkat
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://openarchives.org/pipermail/oai-implementers/attachments/20040927/fe2d3c86/attachment.htm
From jpearson at usc.edu  Mon Sep 27 16:38:35 2004
From: jpearson at usc.edu (Jeff Pearson)
Date: Mon Sep 27 16:41:42 2004
Subject: [OAI-implementers] resumptionToken Implementation
Message-ID: <34540E6A-10C5-11D9-83A5-000A95D2A04E@usc.edu>

I am trying to get some kind of idea how people have implemented the 
resumptionToken. Would some of you be so kind as to share some details 
on how you implemented it?

It would be greatly appreciated.

Jeff Pearson
University of Southern California 


From suryadev at bus.orst.edu  Mon Sep 27 22:19:34 2004
From: suryadev at bus.orst.edu (Venkat)
Date: Mon Sep 27 22:19:43 2004
Subject: [OAI-implementers] building an OAI-PMH Server
Message-ID: <20040928021941.514BB17011A@smtp2.oregonstate.edu>

Hi All,
         After going through all the technical documents of OAI-PMH, I stand
at a point which is quite confusing and have no idea of what should be my
next step.
 
I have a digital collection (collection of XML files)and their corresponding
Metadata(metadata.xml for each XML File). Now, I am interested in setting up
a OAI-PMH complaint server (I'm a Data Provider). I could understand the
protocol but not sure how I should start setting things. My development
platform is PHP(I did collect some information about the tools available on
OAI website). Can anyone guide me from this point?
 
-Venkat

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://openarchives.org/pipermail/oai-implementers/attachments/20040927/3c921062/attachment.htm
From mln at cs.odu.edu  Mon Sep 27 23:31:38 2004
From: mln at cs.odu.edu (Michael Nelson)
Date: Mon Sep 27 23:31:56 2004
Subject: [OAI-implementers] building an OAI-PMH Server
In-Reply-To: <20040928021941.514BB17011A@smtp2.oregonstate.edu>
References: <20040928021941.514BB17011A@smtp2.oregonstate.edu>
Message-ID: <Pine.GSO.4.58.0409272328310.13444@tango.cs.odu.edu>


Venkat,

have you taken a look at:

http://www.dlib.vt.edu/projects/OAI/software/xmlfile/xmlfile.html
http://physnet.uni-oldenburg.de/oai/
http://www.ibiblio.org/oaibiblio/
http://rvot.sourceforge.net/

any one of these tools would likely work for you.

regards,

Michael


On Mon, 27 Sep 2004, Venkat wrote:

> Hi All,
>          After going through all the technical documents of OAI-PMH, I stand
> at a point which is quite confusing and have no idea of what should be my
> next step.
>
> I have a digital collection (collection of XML files)and their corresponding
> Metadata(metadata.xml for each XML File). Now, I am interested in setting up
> a OAI-PMH complaint server (I'm a Data Provider). I could understand the
> protocol but not sure how I should start setting things. My development
> platform is PHP(I did collect some information about the tools available on
> OAI website). Can anyone guide me from this point?
>
> -Venkat
>
>

----
Michael L. Nelson mln@cs.odu.edu http://www.cs.odu.edu/~mln/
Dept of Computer Science, Old Dominion University, Norfolk VA 23529
+1 757 683 6393 +1 757 683 4900 (f)

From suryadev at bus.orst.edu  Tue Sep 28 01:24:04 2004
From: suryadev at bus.orst.edu (Venkat)
Date: Tue Sep 28 01:24:10 2004
Subject: [OAI-implementers] building an OAI-PMH Server
In-Reply-To: <Pine.GSO.4.58.0409272328310.13444@tango.cs.odu.edu>
Message-ID: <20040928052407.861F31040BC@smtp3.oregonstate.edu>

Hi All,
       Thanks for your suggestions. I am going to try the 2 PHP tools listed
on the OAI website and then see what I could do. Hopefully I'll bug all of
you if I run into any problem

Thanks,
-Venkat

-----Original Message-----
From: Michael Nelson [mailto:mln@cs.odu.edu] 
Sent: Monday, September 27, 2004 8:32 PM
To: Venkat
Cc: oai-implementers@openarchives.org
Subject: Re: [OAI-implementers] building an OAI-PMH Server


Venkat,

have you taken a look at:

http://www.dlib.vt.edu/projects/OAI/software/xmlfile/xmlfile.html
http://physnet.uni-oldenburg.de/oai/
http://www.ibiblio.org/oaibiblio/
http://rvot.sourceforge.net/

any one of these tools would likely work for you.

regards,

Michael


On Mon, 27 Sep 2004, Venkat wrote:

> Hi All,
>          After going through all the technical documents of OAI-PMH, I
stand
> at a point which is quite confusing and have no idea of what should be my
> next step.
>
> I have a digital collection (collection of XML files)and their
corresponding
> Metadata(metadata.xml for each XML File). Now, I am interested in setting
up
> a OAI-PMH complaint server (I'm a Data Provider). I could understand the
> protocol but not sure how I should start setting things. My development
> platform is PHP(I did collect some information about the tools available
on
> OAI website). Can anyone guide me from this point?
>
> -Venkat
>
>

----
Michael L. Nelson mln@cs.odu.edu http://www.cs.odu.edu/~mln/
Dept of Computer Science, Old Dominion University, Norfolk VA 23529
+1 757 683 6393 +1 757 683 4900 (f)



From blancoj at umich.edu  Tue Sep 28 10:31:19 2004
From: blancoj at umich.edu (Jose Blanco)
Date: Tue Sep 28 10:31:33 2004
Subject: [OAI-implementers] resumptionToken Implementation
In-Reply-To: <34540E6A-10C5-11D9-83A5-000A95D2A04E@usc.edu>
Message-ID: <022f01c4a567$d54a5710$8e2bd38d@ulibdls05>

Jeff,

What I did, and have seen that others have done also, is basically encode
the resumption token in a way that next time your oai data provider is
called you know where to start extracting records (I'm talking specifically
about ListRecords, but the idea works for ListIdentifiers, and even
ListSets)

For example, your resumption token could take on a value encode in the
following way:

Expirationg_date,start_date_stamp_date,end_date_stamp_date,metadata_format,s
et,database_being_used,number_of_records_returned,

You basically want your resumptionToken value to communicate where to resume
harvesting, so you want to give it the values your repository will need.

Hope this helps.

Jose

-----Original Message-----
From: oai-implementers-bounces@openarchives.org
[mailto:oai-implementers-bounces@openarchives.org] On Behalf Of Jeff Pearson
Sent: Monday, September 27, 2004 4:39 PM
To: oai-implementers@openarchives.org
Subject: [OAI-implementers] resumptionToken Implementation

I am trying to get some kind of idea how people have implemented the 
resumptionToken. Would some of you be so kind as to share some details 
on how you implemented it?

It would be greatly appreciated.

Jeff Pearson
University of Southern California 


_______________________________________________
OAI-implementers mailing list
List information, archives, preferences and to unsubscribe:
http://openarchives.org/mailman/listinfo/oai-implementers


From cwilper at cs.cornell.edu  Tue Sep 28 11:11:46 2004
From: cwilper at cs.cornell.edu (Chris Wilper)
Date: Tue Sep 28 11:12:43 2004
Subject: [OAI-implementers] resumptionToken Implementation
Message-ID: <772EF7E386FEDF4FA6E11A9DA703A4D20469B5@EXCHVS1.cs.cornell.edu>

Hi Jeff,

There are a couple ways to do it.  The "stateless repository" way basically
encodes everything that is needed inside the resumptionToken.  Another
approach is to manage the state on the server, somehow making the
resumptionToken a "key" into the partially-iterated-through list (or db
ResultSet).

Here's a good discussion of resultSet implementation issues if you haven't
seen it:
http://www.openarchives.org/OAI/2.0/guidelines-repository.htm#resumptionToken


- Chris

-----Original Message-----
From: oai-implementers-bounces@openarchives.org
[mailto:oai-implementers-bounces@openarchives.org] On Behalf Of Jeff Pearson
Sent: Monday, September 27, 2004 4:39 PM
To: oai-implementers@openarchives.org
Subject: [OAI-implementers] resumptionToken Implementation

I am trying to get some kind of idea how people have implemented the
resumptionToken. Would some of you be so kind as to share some details on how
you implemented it?

It would be greatly appreciated.

Jeff Pearson
University of Southern California 


_______________________________________________
OAI-implementers mailing list
List information, archives, preferences and to unsubscribe:
http://openarchives.org/mailman/listinfo/oai-implementers


From jpearson at usc.edu  Tue Sep 28 12:31:59 2004
From: jpearson at usc.edu (Jeff Pearson)
Date: Tue Sep 28 12:34:50 2004
Subject: [OAI-implementers] resumptionToken Implementation
In-Reply-To: <772EF7E386FEDF4FA6E11A9DA703A4D20469B5@EXCHVS1.cs.cornell.edu>
References: <772EF7E386FEDF4FA6E11A9DA703A4D20469B5@EXCHVS1.cs.cornell.edu>
Message-ID: <EB85629A-116B-11D9-915F-000A95D2A04E@usc.edu>

I guess I misstated my query last time. I understand the 
implementations as defined in the spec; either create a data result 
cache and hit that or regenerate the query each time. What I was 
wondering was which people were choosing to implement and why.


From mln at cs.odu.edu  Tue Sep 28 12:54:06 2004
From: mln at cs.odu.edu (Michael Nelson)
Date: Tue Sep 28 12:54:08 2004
Subject: [OAI-implementers] resumptionToken Implementation
In-Reply-To: <EB85629A-116B-11D9-915F-000A95D2A04E@usc.edu>
References: <772EF7E386FEDF4FA6E11A9DA703A4D20469B5@EXCHVS1.cs.cornell.edu>
	<EB85629A-116B-11D9-915F-000A95D2A04E@usc.edu>
Message-ID: <Pine.GSO.4.58.0409281252360.22457@tango.cs.odu.edu>

On Tue, 28 Sep 2004, Jeff Pearson wrote:

> I guess I misstated my query last time. I understand the
> implementations as defined in the spec; either create a data result
> cache and hit that or regenerate the query each time. What I was
> wondering was which people were choosing to implement and why.

people are mostly doing the latter approach; only folks w/ systems that
natively support result sets are doing former approach.

regards,

Michael

>
>
> _______________________________________________
> OAI-implementers mailing list
> List information, archives, preferences and to unsubscribe:
> http://openarchives.org/mailman/listinfo/oai-implementers
>

----
Michael L. Nelson mln@cs.odu.edu http://www.cs.odu.edu/~mln/
Dept of Computer Science, Old Dominion University, Norfolk VA 23529
+1 757 683 6393 +1 757 683 4900 (f)

From blancoj at umich.edu  Tue Sep 28 12:54:31 2004
From: blancoj at umich.edu (Jose Blanco)
Date: Tue Sep 28 12:54:44 2004
Subject: [OAI-implementers] resumptionToken Implementation
In-Reply-To: <64A319D1-116E-11D9-AED1-0003934CA344@umich.edu>
Message-ID: <024a01c4a57b$d6447e70$8e2bd38d@ulibdls05>

We query every time we get a request. We did not really do a lot of
experimenting to see which method was more efficient.  This seemed to give
good performance and it was straight forward to implement.

> From: Jeff Pearson <jpearson@usc.edu>
> Date: September 28, 2004 12:31:59 PM EDT
> To: oai-implementers@openarchives.org
> Subject: Re: [OAI-implementers] resumptionToken Implementation
>
> I guess I misstated my query last time. I understand the 
> implementations as defined in the spec; either create a data result 
> cache and hit that or regenerate the query each time. What I was 
> wondering was which people were choosing to implement and why.
>
>
> _______________________________________________
> OAI-implementers mailing list
> List information, archives, preferences and to unsubscribe:
> http://openarchives.org/mailman/listinfo/oai-implementers


From jpearson at usc.edu  Tue Sep 28 12:59:25 2004
From: jpearson at usc.edu (Jeff Pearson)
Date: Tue Sep 28 13:02:49 2004
Subject: [OAI-implementers] resumptionToken Implementation
In-Reply-To: <Pine.GSO.4.58.0409281252360.22457@tango.cs.odu.edu>
References: <772EF7E386FEDF4FA6E11A9DA703A4D20469B5@EXCHVS1.cs.cornell.edu>
	<EB85629A-116B-11D9-915F-000A95D2A04E@usc.edu>
	<Pine.GSO.4.58.0409281252360.22457@tango.cs.odu.edu>
Message-ID: <C09BADCD-116F-11D9-915F-000A95D2A04E@usc.edu>

Michael,

Thanks for the reply. Question then;

Sample case:

Harvester issues a query. DP sends back 100 out of 10,000 results. 
Harvester then begins to request the consecutive chunks. Given that the 
total data set is 10,000, this will probably take a while. Before the 
entire result set is transfered, the DP updates it's repository which 
shuffle the order in which the results are returned. Objects that were 
transferred previously are now kicked back to a later position so it is 
included in a chunk later requested by the harvester.

Does the DP now invalidate the resumptionToken or does it assume the 
Harvester will de-dupe objects on it's side?

What about the new objects that have been added and are in chunks of 
the resultset already transferred? Is it assumed that they will be 
caught the next time around given that the modifydate SHOULD be later 
than the last harvest date? Or is it the harvester's responsibility to 
straighten this all out?


Jeff Pearson
University of Southern California

On Sep 28, 2004, at 9:54 AM, Michael Nelson wrote:

> On Tue, 28 Sep 2004, Jeff Pearson wrote:
>
>> I guess I misstated my query last time. I understand the
>> implementations as defined in the spec; either create a data result
>> cache and hit that or regenerate the query each time. What I was
>> wondering was which people were choosing to implement and why.
>
> people are mostly doing the latter approach; only folks w/ systems that
> natively support result sets are doing former approach.
>
> regards,
>
> Michael
>
>>
>>
>> _______________________________________________
>> OAI-implementers mailing list
>> List information, archives, preferences and to unsubscribe:
>> http://openarchives.org/mailman/listinfo/oai-implementers
>>
>
> ----
> Michael L. Nelson mln@cs.odu.edu http://www.cs.odu.edu/~mln/
> Dept of Computer Science, Old Dominion University, Norfolk VA 23529
> +1 757 683 6393 +1 757 683 4900 (f)


From hussein at cs.uct.ac.za  Tue Sep 28 13:24:28 2004
From: hussein at cs.uct.ac.za (Hussein Suleman)
Date: Tue Sep 28 13:24:45 2004
Subject: [OAI-implementers] resumptionToken Implementation
In-Reply-To: <C09BADCD-116F-11D9-915F-000A95D2A04E@usc.edu>
References: <772EF7E386FEDF4FA6E11A9DA703A4D20469B5@EXCHVS1.cs.cornell.edu>	<EB85629A-116B-11D9-915F-000A95D2A04E@usc.edu>	<Pine.GSO.4.58.0409281252360.22457@tango.cs.odu.edu>
	<C09BADCD-116F-11D9-915F-000A95D2A04E@usc.edu>
Message-ID: <41599E4C.8080507@cs.uct.ac.za>

hi

in terms of reshuffling, if an object is resent, that is ok - the 
harvester should assume it is a more up-to-date version. what is more 
serious is if an object not yet sent is shuffled into a previously-sent 
position ... hopefully a repository is designed such that no items ever 
move "back" in the logical sequencing, to prevent this problem occurring 
in repositories with linear sequences of chunks associated with 
resumptionTokens. shuffling is simply not a good idea :)

in terms of new objects, yes, it is assumed they are caught next time a 
harvest run is conducted.

in general, as long as the data provider follows the specification of 
the protocol and the implementation guidelines, the harvester should be 
able to straighten out any apparent inconsistencies it detects.

hope this is useful ...

ttfn,
----hussein


Jeff Pearson wrote:

> Michael,
> 
> Thanks for the reply. Question then;
> 
> Sample case:
> 
> Harvester issues a query. DP sends back 100 out of 10,000 results. 
> Harvester then begins to request the consecutive chunks. Given that the 
> total data set is 10,000, this will probably take a while. Before the 
> entire result set is transfered, the DP updates it's repository which 
> shuffle the order in which the results are returned. Objects that were 
> transferred previously are now kicked back to a later position so it is 
> included in a chunk later requested by the harvester.
> 
> Does the DP now invalidate the resumptionToken or does it assume the 
> Harvester will de-dupe objects on it's side?
> 
> What about the new objects that have been added and are in chunks of the 
> resultset already transferred? Is it assumed that they will be caught 
> the next time around given that the modifydate SHOULD be later than the 
> last harvest date? Or is it the harvester's responsibility to straighten 
> this all out?
> 
> 
> Jeff Pearson
> University of Southern California
> 
> On Sep 28, 2004, at 9:54 AM, Michael Nelson wrote:
> 
>> On Tue, 28 Sep 2004, Jeff Pearson wrote:
>>
>>> I guess I misstated my query last time. I understand the
>>> implementations as defined in the spec; either create a data result
>>> cache and hit that or regenerate the query each time. What I was
>>> wondering was which people were choosing to implement and why.
>>
>>
>> people are mostly doing the latter approach; only folks w/ systems that
>> natively support result sets are doing former approach.
>>
>> regards,
>>
>> Michael
>>
>>>
>>>
>>> _______________________________________________
>>> OAI-implementers mailing list
>>> List information, archives, preferences and to unsubscribe:
>>> http://openarchives.org/mailman/listinfo/oai-implementers
>>>
>>
>> ----
>> Michael L. Nelson mln@cs.odu.edu http://www.cs.odu.edu/~mln/
>> Dept of Computer Science, Old Dominion University, Norfolk VA 23529
>> +1 757 683 6393 +1 757 683 4900 (f)
> 
> 
> 
> _______________________________________________
> OAI-implementers mailing list
> List information, archives, preferences and to unsubscribe:
> http://openarchives.org/mailman/listinfo/oai-implementers
> 

-- 
=====================================================================
hussein suleman ~ hussein@cs.uct.ac.za ~ http://www.husseinsspace.com
=====================================================================


From cwilper at cs.cornell.edu  Tue Sep 28 14:01:55 2004
From: cwilper at cs.cornell.edu (Chris Wilper)
Date: Tue Sep 28 14:02:47 2004
Subject: [OAI-implementers] resumptionToken Implementation
Message-ID: <772EF7E386FEDF4FA6E11A9DA703A4D20469B7@EXCHVS1.cs.cornell.edu>

In Fedora, we use the following approach: The query is run once against the
database.  After iterating through the first chunk of results, the ResultSet
object is just put into Map, keyed by a unique string (which is also the
resumptionToken).  If no one comes back to continue getting results within
some period of time, the ResultSet is removed from the Map and close()d.  If
they do come back, we can immediately start doing next()s.

The advantage is that there's very little latency on subsequent requests in a
series of resumptions.... the drawback being that DB connections from our
connectionpool are kept open until someone comes back, or our resumption
token timeout kicks in.

- Chris

-----Original Message-----
From: oai-implementers-bounces@openarchives.org
[mailto:oai-implementers-bounces@openarchives.org] On Behalf Of Jeff Pearson
Sent: Tuesday, September 28, 2004 12:32 PM
To: oai-implementers@openarchives.org
Subject: Re: [OAI-implementers] resumptionToken Implementation

I guess I misstated my query last time. I understand the implementations as
defined in the spec; either create a data result cache and hit that or
regenerate the query each time. What I was wondering was which people were
choosing to implement and why.


_______________________________________________
OAI-implementers mailing list
List information, archives, preferences and to unsubscribe:
http://openarchives.org/mailman/listinfo/oai-implementers


From robert.tansley at hp.com  Tue Sep 28 18:03:23 2004
From: robert.tansley at hp.com (Tansley, Robert)
Date: Tue Sep 28 18:03:32 2004
Subject: [OAI-implementers] resumptionToken Implementation
Message-ID: <40700B4C02ABD5119F000090278766440D077D21@hplex1.hpl.hp.com>

> Sample case:
> 
> Harvester issues a query. DP sends back 100 out of 10,000 results. 
> Harvester then begins to request the consecutive chunks. 
> Given that the 
> total data set is 10,000, this will probably take a while. Before the 
> entire result set is transfered, the DP updates it's repository which 
> shuffle the order in which the results are returned. Objects 
> that were 
> transferred previously are now kicked back to a later 
> position so it is 
> included in a chunk later requested by the harvester.
> 
> Does the DP now invalidate the resumptionToken or does it assume the 
> Harvester will de-dupe objects on it's side?
> 
> What about the new objects that have been added and are in chunks of 
> the resultset already transferred? Is it assumed that they will be 
> caught the next time around given that the modifydate SHOULD be later 
> than the last harvest date? Or is it the harvester's 
> responsibility to 
> straighten this all out?

DSpace uses the 'stateless' approach - see http://dspace.org/technology/system-docs/application.html#oai and scroll down a bit.  The sorting is done by (internal database) ID so de-dupping shouldn't be an issue for the harvester.  However your corner case may just cause a problem, or weird side-effect.

Say you're harvesting date range X-Y.  When you first issue the request, a certain set of items have a 'last modified' date within that range, so DSpace returns a load, and a resumption token.  If some items are then modified so that their 'last modified' date is outside the date range X-Y, they'll drop off that list, so suddenly item Z that was result number 101 of those items is now result number 99, and the next harvest request will miss it, since DSpace will think that Z was already served up in the first request.

DSpace would probably work OK in the scenario you've mentioned if the date range specified is X-(present) or no date range; results are sorted by ID so the order wouldn't change, new items would appear at the end of the list and updated items wouldn't have 'moved'.

Deleted items might be a bit yucky though...

Maybe you could to 'freeze' a result set when a harvest comes in, but that may not scale up when your repository is huge and the number of harvests is large (caching dozens of 100,000-long result sets?)

Solutions on a postcard to...

 Robert Tansley / Digital Media Systems Programme / HP Labs
  http://www.hpl.hp.com/personal/Robert_Tansley/

From jpearson at usc.edu  Tue Sep 28 18:32:42 2004
From: jpearson at usc.edu (Jeff Pearson)
Date: Tue Sep 28 18:35:43 2004
Subject: [OAI-implementers] resumptionToken Implementation
In-Reply-To: <40700B4C02ABD5119F000090278766440D077D21@hplex1.hpl.hp.com>
References: <40700B4C02ABD5119F000090278766440D077D21@hplex1.hpl.hp.com>
Message-ID: <4FC8A4A8-119E-11D9-915F-000A95D2A04E@usc.edu>

After reading the couple of responses, my first inclination is to;

1) Store the parameters and regenerate the query when the resumption 
token is received.

But what I think I will also add is to store the total number of 
results when the query was first run. If the current total is different 
from that number, it invalidates the token and tells the harvester. 
This is the best way I can think of to deal with this issue.....

Any other suggestions would be certainly entertained.......





On Sep 28, 2004, at 3:03 PM, Tansley, Robert wrote:

>> Sample case:
>>
>> Harvester issues a query. DP sends back 100 out of 10,000 results.
>> Harvester then begins to request the consecutive chunks.
>> Given that the
>> total data set is 10,000, this will probably take a while. Before the
>> entire result set is transfered, the DP updates it's repository which
>> shuffle the order in which the results are returned. Objects
>> that were
>> transferred previously are now kicked back to a later
>> position so it is
>> included in a chunk later requested by the harvester.
>>
>> Does the DP now invalidate the resumptionToken or does it assume the
>> Harvester will de-dupe objects on it's side?
>>
>> What about the new objects that have been added and are in chunks of
>> the resultset already transferred? Is it assumed that they will be
>> caught the next time around given that the modifydate SHOULD be later
>> than the last harvest date? Or is it the harvester's
>> responsibility to
>> straighten this all out?
>
> DSpace uses the 'stateless' approach - see 
> http://dspace.org/technology/system-docs/application.html#oai and 
> scroll down a bit.  The sorting is done by (internal database) ID so 
> de-dupping shouldn't be an issue for the harvester.  However your 
> corner case may just cause a problem, or weird side-effect.
>
> Say you're harvesting date range X-Y.  When you first issue the 
> request, a certain set of items have a 'last modified' date within 
> that range, so DSpace returns a load, and a resumption token.  If some 
> items are then modified so that their 'last modified' date is outside 
> the date range X-Y, they'll drop off that list, so suddenly item Z 
> that was result number 101 of those items is now result number 99, and 
> the next harvest request will miss it, since DSpace will think that Z 
> was already served up in the first request.
>
> DSpace would probably work OK in the scenario you've mentioned if the 
> date range specified is X-(present) or no date range; results are 
> sorted by ID so the order wouldn't change, new items would appear at 
> the end of the list and updated items wouldn't have 'moved'.
>
> Deleted items might be a bit yucky though...
>
> Maybe you could to 'freeze' a result set when a harvest comes in, but 
> that may not scale up when your repository is huge and the number of 
> harvests is large (caching dozens of 100,000-long result sets?)
>
> Solutions on a postcard to...
>
>  Robert Tansley / Digital Media Systems Programme / HP Labs
>   http://www.hpl.hp.com/personal/Robert_Tansley/


From matt at biomedcentral.com  Wed Sep 29 05:22:59 2004
From: matt at biomedcentral.com (Matthew Cockerill)
Date: Wed Sep 29 05:20:57 2004
Subject: [OAI-implementers] resumptionToken Implementation
Message-ID: <BD514F436C37C44BB392BF330F0CFFA206D389E2@severin.cursci.co.uk>

BioMed Central similarly uses a stateless approach for resumption tokens,
and I too have been concerned about long term scaleability using 

(a)  the stateless approach:
Retrieving items 999,900 to 1,000,000 of an ordered set from a database
tends can be a very expensive operation, and using 10,000 such 100 item
requests in order to retrieve a full listing from an OAI-enabled database
containing  a million records is clearly vastly more expensive (in terms of
resources) than, say downloading a compressed file containing the data for
all 1 million records in one go.

(b) a stateful approach 
Caching lots of resultsets is the middle tier doesn't really seem easily
scaleable to very large sets, since cached resultsets tend to be inherently
memory-resident. A database temporary table for each new request could be
used, but would create its own resource issues.



I guess that the best that can be done is to sort items by a unique ordered
accession number/id/ (which doesn't change if an item is updated) and to use
this value as the resumption token, rather than using "offset within the
ordered set" as the resumption token. This should help both reliability and
performance (since appropriate relational database indexes can allow the
performance of  set=xxxx and accessionnumber>yyyy this to be tuned pretty
effectively, in a way that 

set=xxxx and offset>yyyyyy 

cannot be


Matt 
 == 
Matthew Cockerill Ph.D. 
Technical Director
BioMed Central ( http://www.biomedcentral.com/ ) 
34-42, Cleveland Street 
London 
W1T 4LB 
UK 

Tel 020 7631 9127 
Fax: 020 7580 1938 
Email: matt@biomedcentral.com 



> DSpace uses the 'stateless' approach - see 
> http://dspace.org/technology/system-docs/application.html#oai 
> and scroll down a bit.  The sorting is done by (internal 
> database) ID so de-dupping shouldn't be an issue for the 
> harvester.  However your corner case may just cause a 
> problem, or weird side-effect.
> 
> Say you're harvesting date range X-Y.  When you first issue 
> the request, a certain set of items have a 'last modified' 
> date within that range, so DSpace returns a load, and a 
> resumption token.  If some items are then modified so that 
> their 'last modified' date is outside the date range X-Y, 
> they'll drop off that list, so suddenly item Z that was 
> result number 101 of those items is now result number 99, and 
> the next harvest request will miss it, since DSpace will 
> think that Z was already served up in the first request.
> 
> DSpace would probably work OK in the scenario you've 
> mentioned if the date range specified is X-(present) or no 
> date range; results are sorted by ID so the order wouldn't 
> change, new items would appear at the end of the list and 
> updated items wouldn't have 'moved'.
> 
> Deleted items might be a bit yucky though...
> 
> Maybe you could to 'freeze' a result set when a harvest comes 
> in, but that may not scale up when your repository is huge 
> and the number of harvests is large (caching dozens of 
> 100,000-long result sets?)
> 
> Solutions on a postcard to...
> 
>  Robert Tansley / Digital Media Systems Programme / HP Labs
>   http://www.hpl.hp.com/personal/Robert_Tansley/
> 
 

From tdb01r at ecs.soton.ac.uk  Wed Sep 29 06:49:05 2004
From: tdb01r at ecs.soton.ac.uk (Tim Brody)
Date: Wed Sep 29 06:49:44 2004
Subject: [OAI-implementers] resumptionToken Implementation
In-Reply-To: <BD514F436C37C44BB392BF330F0CFFA206D389E2@severin.cursci.co.uk>
References: <BD514F436C37C44BB392BF330F0CFFA206D389E2@severin.cursci.co.uk>
Message-ID: <415A9321.8050902@ecs.soton.ac.uk>

Matthew Cockerill wrote:

> BioMed Central similarly uses a stateless approach for resumption tokens,
> and I too have been concerned about long term scaleability using 
> 
> (a)  the stateless approach:
> Retrieving items 999,900 to 1,000,000 of an ordered set from a database
> tends can be a very expensive operation, and using 10,000 such 100 item
> requests in order to retrieve a full listing from an OAI-enabled database
> containing  a million records is clearly vastly more expensive (in terms of
> resources) than, say downloading a compressed file containing the data for
> all 1 million records in one go.

Celestial maintains a "cursor" column consisting of the concantenated 
datestamp and id (it actually uses only the last three digits of the id, 
to keep the cursor shorter - I've made the assumption not more than 1000 
records can be stored in under a second).

This allows a daterange/resumption token to be efficiently handled. 
Things get slow when that result set has to be filtered for Sets. The 
N:M nature of Sets makes it a real pain in the ass.

It is essential that a harvester requests changes since when it 
*started* it's harvest, and not when it finished. Strictly, the 
harvester needs to use the OAI request timestamp returned by the 
repository in the first response.

All the best,
Tim.

> (b) a stateful approach 
> Caching lots of resultsets is the middle tier doesn't really seem easily
> scaleable to very large sets, since cached resultsets tend to be inherently
> memory-resident. A database temporary table for each new request could be
> used, but would create its own resource issues.
> 
> 
> 
> I guess that the best that can be done is to sort items by a unique ordered
> accession number/id/ (which doesn't change if an item is updated) and to use
> this value as the resumption token, rather than using "offset within the
> ordered set" as the resumption token. This should help both reliability and
> performance (since appropriate relational database indexes can allow the
> performance of  set=xxxx and accessionnumber>yyyy this to be tuned pretty
> effectively, in a way that 
> 
> set=xxxx and offset>yyyyyy 
> 
> cannot be
> 
> 
> Matt 
>  == 
> Matthew Cockerill Ph.D. 
> Technical Director
> BioMed Central ( http://www.biomedcentral.com/ ) 
> 34-42, Cleveland Street 
> London 
> W1T 4LB 
> UK 
> 
> Tel 020 7631 9127 
> Fax: 020 7580 1938 
> Email: matt@biomedcentral.com 
> 
> 
> 
> 
>>DSpace uses the 'stateless' approach - see 
>>http://dspace.org/technology/system-docs/application.html#oai 
>>and scroll down a bit.  The sorting is done by (internal 
>>database) ID so de-dupping shouldn't be an issue for the 
>>harvester.  However your corner case may just cause a 
>>problem, or weird side-effect.
>>
>>Say you're harvesting date range X-Y.  When you first issue 
>>the request, a certain set of items have a 'last modified' 
>>date within that range, so DSpace returns a load, and a 
>>resumption token.  If some items are then modified so that 
>>their 'last modified' date is outside the date range X-Y, 
>>they'll drop off that list, so suddenly item Z that was 
>>result number 101 of those items is now result number 99, and 
>>the next harvest request will miss it, since DSpace will 
>>think that Z was already served up in the first request.
>>
>>DSpace would probably work OK in the scenario you've 
>>mentioned if the date range specified is X-(present) or no 
>>date range; results are sorted by ID so the order wouldn't 
>>change, new items would appear at the end of the list and 
>>updated items wouldn't have 'moved'.
>>
>>Deleted items might be a bit yucky though...
>>
>>Maybe you could to 'freeze' a result set when a harvest comes 
>>in, but that may not scale up when your repository is huge 
>>and the number of harvests is large (caching dozens of 
>>100,000-long result sets?)
>>
>>Solutions on a postcard to...



From jyoung at oclc.org  Thu Sep 30 12:25:25 2004
From: jyoung at oclc.org (Young,Jeff)
Date: Thu Sep 30 12:25:30 2004
Subject: [OAI-implementers] HTTPS and OAI
Message-ID: <E5431CF93E29F9478878F623E5B9CE9809DF78E3@oa3-server.oa.oclc.org>

It appears that at least some of the DSpace OAI installations are running
from the https protocol instead of http. I would think this violates OAI
conformity. Are there any harvesters currently available that deal with
https?

Thanks.

Jeff

---
Jeffrey A. Young
Software Architect
Office of Research, Mail Code 710
OCLC Online Computer Library Center, Inc.
6565 Frantz Rd.
Dublin, OH 43017-3395
www.oclc.org
 
Voice: 614-764-4342
Voice: 800-848-5878, ext. 4342
Fax: 614-718-7477
Email: jyoung@oclc.org


From thabing at uiuc.edu  Thu Sep 30 15:09:34 2004
From: thabing at uiuc.edu (Thomas G. Habing)
Date: Thu Sep 30 15:09:41 2004
Subject: [OAI-implementers] HTTPS and OAI
In-Reply-To: <E5431CF93E29F9478878F623E5B9CE9809DF78E3@oa3-server.oa.oclc.org>
References: <E5431CF93E29F9478878F623E5B9CE9809DF78E3@oa3-server.oa.oclc.org>
Message-ID: <415C59EE.5090606@uiuc.edu>

Young,Jeff wrote:

> It appears that at least some of the DSpace OAI installations are running
> from the https protocol instead of http. I would think this violates OAI
> conformity. Are there any harvesters currently available that deal with
> https?
> 
> Thanks.
> 
> Jeff
> 
> ---
> Jeffrey A. Young
> Software Architect
> Office of Research, Mail Code 710
> OCLC Online Computer Library Center, Inc.
> 6565 Frantz Rd.
> Dublin, OH 43017-3395
> www.oclc.org
>  
> Voice: 614-764-4342
> Voice: 800-848-5878, ext. 4342
> Fax: 614-718-7477
> Email: jyoung@oclc.org
> 
> 
> _______________________________________________
> OAI-implementers mailing list
> List information, archives, preferences and to unsubscribe:
> http://openarchives.org/mailman/listinfo/oai-implementers
> 

Hi Jeff,

Our UIUC Harvester can harvest from https.  However, this is mostly an 
accident of the Windows xml/http toolkit we use which seems to handle 
https pretty transparently.

Even though the OAI spec doesn't mention https, it seems like it might 
be useful to allow it for cases were an OAI repository might require the 
security for some reason like closed systems passing secret metadata 
around.  Although, it probably shouldn't be used unless it is really needed.

Tom Habing


-------------- next part --------------
A non-text attachment was scrubbed...
Name: thabing.vcf
Type: text/x-vcard
Size: 313 bytes
Desc: not available
Url : http://openarchives.org/pipermail/oai-implementers/attachments/20040930/c8015f14/thabing.vcf
From simeon at cs.cornell.edu  Thu Sep 30 15:57:12 2004
From: simeon at cs.cornell.edu (Simeon Warner)
Date: Thu Sep 30 15:57:43 2004
Subject: [OAI-implementers] HTTPS and OAI
In-Reply-To: <415C59EE.5090606@uiuc.edu>
References: <E5431CF93E29F9478878F623E5B9CE9809DF78E3@oa3-server.oa.oclc.org>
	<415C59EE.5090606@uiuc.edu>
Message-ID: <Pine.LNX.4.58.0409301551050.4215@dhcp103-124.cs.cornell.edu>



On Thu, 30 Sep 2004, Thomas G. Habing wrote:
> Young,Jeff wrote:
> > It appears that at least some of the DSpace OAI installations are running
> > from the https protocol instead of http. I would think this violates OAI
> > conformity. Are there any harvesters currently available that deal with
> > https?
> >
> > Thanks.
> > Jeff
>
> Hi Jeff,
>
> Our UIUC Harvester can harvest from https.  However, this is mostly an
> accident of the Windows xml/http toolkit we use which seems to handle
> https pretty transparently.
>
> Even though the OAI spec doesn't mention https, it seems like it might
> be useful to allow it for cases were an OAI repository might require the
> security for some reason like closed systems passing secret metadata
> around.  Although, it probably shouldn't be used unless it is really needed.
>
> Tom Habing

Like, Tom it seems I get https pretty much for free with my Perl harvester
using LWP (just had to install Net::SSL package). I was then able to
harvest from the https://ir.uoregon.edu:8443/dspace-oai site listed on
http://gita.grainger.uiuc.edu/registry/ListAllAllRepos.asp.

However, https is not an 'accepted' transport for OAI-PMH. The
specification describes only http transport. I wonder if there any good
reason to encourage harvesters to support https in 'open' applications?

Cheers,
Simeon



From ehs at pobox.com  Thu Sep 30 16:27:02 2004
From: ehs at pobox.com (Ed Summers)
Date: Thu Sep 30 16:27:06 2004
Subject: [OAI-implementers] HTTPS and OAI
In-Reply-To: <415C59EE.5090606@uiuc.edu>
References: <E5431CF93E29F9478878F623E5B9CE9809DF78E3@oa3-server.oa.oclc.org>
	<415C59EE.5090606@uiuc.edu>
Message-ID: <20040930202702.GB4710@chloe.inkdroid.org>

On Thu, Sep 30, 2004 at 02:09:34PM -0500, Thomas G. Habing wrote:
> >It appears that at least some of the DSpace OAI installations are running
> >from the https protocol instead of http. I would think this violates OAI
> >conformity. Are there any harvesters currently available that deal with
> >https?

Net::OAI::Harvester wraps LWP::UserAgent for http transactions...and
LWP::UserAgent should understand https just fine, although at one point
in the past Net::SSLeay was required I believe.

I'd like to test out N:O:H on https but wasn't able to find any https style 
urls in this list [1]. Is there a target you know of that I could try out?

//Ed

[1] http://www.openarchives.org/Register/BrowseSites.pl


From thabing at uiuc.edu  Thu Sep 30 16:44:04 2004
From: thabing at uiuc.edu (Thomas G. Habing)
Date: Thu Sep 30 16:44:12 2004
Subject: [OAI-implementers] HTTPS and OAI
In-Reply-To: <20040930202702.GB4710@chloe.inkdroid.org>
References: <E5431CF93E29F9478878F623E5B9CE9809DF78E3@oa3-server.oa.oclc.org>	<415C59EE.5090606@uiuc.edu>
	<20040930202702.GB4710@chloe.inkdroid.org>
Message-ID: <415C7014.4080001@uiuc.edu>

Ed Summers wrote:

> On Thu, Sep 30, 2004 at 02:09:34PM -0500, Thomas G. Habing wrote:
> 
>>>It appears that at least some of the DSpace OAI installations are running
>>
>>>from the https protocol instead of http. I would think this violates OAI
>>
>>>conformity. Are there any harvesters currently available that deal with
>>>https?
> 
> 
> Net::OAI::Harvester wraps LWP::UserAgent for http transactions...and
> LWP::UserAgent should understand https just fine, although at one point
> in the past Net::SSLeay was required I believe.
> 
> I'd like to test out N:O:H on https but wasn't able to find any https style 
> urls in this list [1]. Is there a target you know of that I could try out?
> 
> //Ed
> 
> [1] http://www.openarchives.org/Register/BrowseSites.pl
> 
> 
> _______________________________________________
> OAI-implementers mailing list
> List information, archives, preferences and to unsubscribe:
> http://openarchives.org/mailman/listinfo/oai-implementers
> 


University of Oregon Scholars' Bank
     https://ir.uoregon.edu:8443/dspace-oai
T-Space at The University of Toronto Libraries
     https://tspace.library.utoronto.ca/tspace-oai
-------------- next part --------------
A non-text attachment was scrubbed...
Name: thabing.vcf
Type: text/x-vcard
Size: 313 bytes
Desc: not available
Url : http://openarchives.org/pipermail/oai-implementers/attachments/20040930/da5a99c7/thabing.vcf
From a.powell at ukoln.ac.uk  Thu Sep 30 16:56:21 2004
From: a.powell at ukoln.ac.uk (Andy Powell)
Date: Thu Sep 30 16:57:57 2004
Subject: [OAI-implementers] HTTPS and OAI
In-Reply-To: <415C59EE.5090606@uiuc.edu>
References: <E5431CF93E29F9478878F623E5B9CE9809DF78E3@oa3-server.oa.oclc.org>
	<415C59EE.5090606@uiuc.edu>
Message-ID: <Pine.WNT.4.56.0409302133510.-1711633@ulpc-ap-home.bath.ac.uk>

On Thu, 30 Sep 2004, Thomas G. Habing wrote:

> Even though the OAI spec doesn't mention https, it seems like it might
> be useful to allow it for cases were an OAI repository might require the
> security for some reason like closed systems passing secret metadata
> around.

Yes, I agree.  Whenever I give presentations/tutorials about the OAI-PMH I
tend to mention that one of the advantages of having layered the protocol
over HTTP is that you get things like compression and security thrown in
for free.

Andy
--
Distributed Systems, UKOLN, University of Bath, Bath, BA2 7AY, UK
http://www.ukoln.ac.uk/ukoln/staff/a.powell/      +44 1225 383933
Resource Discovery Network http://www.rdn.ac.uk/
ECDL 2004, Bath, UK - 12-17 Sept 2004 - http://www.ecdl2004.org/

From khage at umich.edu  Thu Sep 30 17:04:36 2004
From: khage at umich.edu (Kat Hagedorn)
Date: Thu Sep 30 17:04:36 2004
Subject: [OAI-implementers] HTTPS and OAI
In-Reply-To: <415C7014.4080001@uiuc.edu>
References: <E5431CF93E29F9478878F623E5B9CE9809DF78E3@oa3-server.oa.oclc.org>	<415C59EE.5090606@uiuc.edu>
	<20040930202702.GB4710@chloe.inkdroid.org>
	<415C7014.4080001@uiuc.edu>
Message-ID: <562B2204-1324-11D9-93A7-0003934CA344@umich.edu>


On Sep 30, 2004, at 4:44 PM, Thomas G. Habing wrote:

> Ed Summers wrote:
>
>> On Thu, Sep 30, 2004 at 02:09:34PM -0500, Thomas G. Habing wrote:
>>>> It appears that at least some of the DSpace OAI installations are 
>>>> running
>>>
>>>> from the https protocol instead of http. I would think this 
>>>> violates OAI
>>>
>>>> conformity. Are there any harvesters currently available that deal 
>>>> with
>>>> https?
>> Net::OAI::Harvester wraps LWP::UserAgent for http transactions...and
>> LWP::UserAgent should understand https just fine, although at one 
>> point
>> in the past Net::SSLeay was required I believe.
>> I'd like to test out N:O:H on https but wasn't able to find any https 
>> style urls in this list [1]. Is there a target you know of that I 
>> could try out?
>> //Ed
>> [1] http://www.openarchives.org/Register/BrowseSites.pl
>> _______________________________________________
>> OAI-implementers mailing list
>> List information, archives, preferences and to unsubscribe:
>> http://openarchives.org/mailman/listinfo/oai-implementers
>
>
> University of Oregon Scholars' Bank
>     https://ir.uoregon.edu:8443/dspace-oai
> T-Space at The University of Toronto Libraries
>     https://tspace.library.utoronto.ca/tspace-oai

I harvest these using the following baseURLs:

University of Oregon Scholars' Bank
     http://ir.uoregon.edu:8080/dspace-oai
T-Space at The University of Toronto Libraries
     http://tspace.library.utoronto.ca/tspace-oai/

- Kat


> <thabing.vcf>_______________________________________________
> OAI-implementers mailing list
> List information, archives, preferences and to unsubscribe:
> http://openarchives.org/mailman/listinfo/oai-implementers
>


From ehs at pobox.com  Thu Sep 30 17:15:29 2004
From: ehs at pobox.com (Ed Summers)
Date: Thu Sep 30 17:15:38 2004
Subject: [OAI-implementers] HTTPS and OAI
In-Reply-To: <415C7014.4080001@uiuc.edu>
References: <E5431CF93E29F9478878F623E5B9CE9809DF78E3@oa3-server.oa.oclc.org>
	<415C59EE.5090606@uiuc.edu>
	<20040930202702.GB4710@chloe.inkdroid.org>
	<415C7014.4080001@uiuc.edu>
Message-ID: <20040930211529.GA7339@chloe.inkdroid.org>

On Thu, Sep 30, 2004 at 03:44:04PM -0500, Thomas G. Habing wrote:
> University of Oregon Scholars' Bank
>     https://ir.uoregon.edu:8443/dspace-oai

Yep, Net::OAI::Harvester handles this target just fine courtesy of
LWP::UserAgent. 

//Ed

From crawley at dstc.edu.au  Thu Sep 30 22:32:53 2004
From: crawley at dstc.edu.au (Stephen Crawley)
Date: Thu Sep 30 22:33:21 2004
Subject: [OAI-implementers] HTTPS and OAI 
In-Reply-To: Message from Simeon Warner <simeon@cs.cornell.edu> of "Thu,
	30 Sep 2004 15:57:12 -0400."
	<Pine.LNX.4.58.0409301551050.4215@dhcp103-124.cs.cornell.edu> 
Message-ID: <200410010232.i912WVQQ003926@piglet.dstc.edu.au>


You wrote:
> However, https is not an 'accepted' transport for OAI-PMH. The
> specification describes only http transport. I wonder if there any good
> reason to encourage harvesters to support https in 'open' applications?

(Note: it is not just 'harvesters' that will use OAI-PMH.  The 'sets' 
functionality means that it could be used as a primitive category-based
metadata query mechanism.) 

Here are some good reasons:

1)  To allow private metadata to be interchanged securely.  While the 
    primary motivation of OAI-PMH is for open interchange, there is no good
    reason to preclude other uses of the protocol.  

2)  To allow important (public or private) metadata to be interchanged
    reliably.  HTTPS assures that no third party is tweaking the metadata 
    on the wire.

3)  To allow the client machines to know that they are talking to the
    right server.  HTTPS will catch attempts at spoofing; e.g. someone 
    creating a server that pretends to be your OAI server.

4)  To allow OAI servers to know who they are really sending metadata
    to.  HTTPS with client-side certificates (checked by the server)
    allows the server to establish that the client's true identity can
    be reliably determined if required.  Regular HTTPS can also be
    used to make other forms of HTTP-based user authentication safe;
    e.g. to secure user account names and passwords in an HTTP Basic 
    Authentication interchange.

5)  To allow ensure privacy of client requests.  Even when metadata is 
    public, it could be important that third parties do not know which 
    records are being requested by which clients.

Most people would prefer not to think about the kinds of issues that
HTTPS guards against.  But that does not make them imaginary.

IMO, it would be useful if the OAI specifications made some sensible
recommendations about the use of HTTPS and the use of standard HTTP
authentication mechanisms ... were appropriate.

-- Steve

+----------------------------------+----------------------------------------
| Stephen Crawley                  | HotMeta Project Leader
| Level 7, GP South Building (78)  | Distributed Systems Technology CRC
| Staff House Road                 | Tel   : +61 7 3365 4310
| The University of Queensland     | Fax   : +61 7 3365 4311
| Queensland 4072                  | Email : crawley@dstc.edu.au
| Australia                        | WWW   : http://www.dstc.edu.au
|                                  | DSTC is the Australian W3C Office
+----------------------------------+----------------------------------------


